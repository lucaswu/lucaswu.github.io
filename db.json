{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1603204607641},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1603204610611},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1603204610611},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1603204610611},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1603204610611},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1603204610611},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1603204610621},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1603204610612},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1603204610612},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1603204610612},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1603204610613},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1603204610613},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1603204610612},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1603204610613},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1603204610613},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1603204610613},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1603204610614},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1603204610614},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1603204610620},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1603204610614},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1603204610620},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1603204610620},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1603204610620},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1603204610621},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1603204610621},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1603204610622},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1603204610621},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1603204610614},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1603204610615},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1603204610615},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1603204610615},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1603204610615},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1603204610615},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1603204610616},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1603204610616},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1603204610616},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1603204610618},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1603204610616},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1603204610619},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1603204610619},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1603204610619},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1603204610619},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1603204610619},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1603204610622},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1603204610627},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1603204610636},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1603204610636},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1603204610637},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1603204610636},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1603204610637},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1603204610637},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1603204610638},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1603204610641},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1603204610617},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1603204610642},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1603204610642},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1603204610641},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1603204610618},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1603204610617},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1603204610618},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1603204610617},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1603204610618},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1603204610623},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1603204610623},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1603204610623},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1603204610623},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1603204610624},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1603204610624},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1603204610625},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1603204610625},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1603204610626},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1603204610626},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1603204610627},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1603204610625},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1603204610629},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1603204610628},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1603204610633},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1603204610638},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1603204610639},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1603204610639},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1603204610640},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1603204610640},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1603204610639},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1603204610632},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1603204610631},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1603204610635},{"_id":"public/2020/10/20/hello-world/index.html","hash":"f911d416b5061d305d66fa0ab5d5e1a2c9133e38","modified":1603205423614},{"_id":"public/archives/index.html","hash":"53a865de6cad38a03f1395d0f262941851029200","modified":1605194352091},{"_id":"public/archives/2020/index.html","hash":"55745212f58fe4ac4abe298abe74f87d618066cb","modified":1605194352091},{"_id":"public/archives/2020/10/index.html","hash":"7a223b304134b6894d98af95d764fc76d3710790","modified":1605194352091},{"_id":"public/index.html","hash":"ff564ccc5677f2ad52acf0d77c856cc693e5ae1a","modified":1605194597642},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1603204628948},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1603204628948},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1603204628948},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1603204628948},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1603204628948},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1603204628948},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1603204628948},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1603204628948},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1603204628948},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1603204628948},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1603204628948},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1603204628948},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1603204628948},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1603204628948},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1603204628948},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1603204628948},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1603204628948},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1603204628948},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1603204628948},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1603204628948},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1603204628948},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1603204628948},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1603204628948},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1603204697603},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1603204697604},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1603204697604},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1603204697607},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1603204697607},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1603204697608},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1603204697608},{"_id":"themes/next/_config.yml","hash":"c448870654d102314c38cc7addc7a87e7ce1967b","modified":1604421832963},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1603204697609},{"_id":"themes/next/package.json","hash":"6f93b919f7555d73221042573c327639e336af8b","modified":1603205076813},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1603204697608},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1603204697615},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1603204697604},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1603204697606},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1603204697605},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1603204697606},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1603204697606},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1603204697606},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1603204697606},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1603204697607},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1603204697607},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1603204697607},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1603204697607},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1603204697610},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1603204697610},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1603204697609},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1603204697610},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1603204697610},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1603204697611},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1603204697611},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1603204697611},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1603204697611},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1603204697615},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1603204697616},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1603204697616},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1603204697616},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1603204697616},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1603204697616},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1603204697617},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1603204697617},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1603204697617},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1603204697617},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1603204697618},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1603204697618},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1603204697618},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1603204697618},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1603204697619},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1603204697619},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1603204697619},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1603204697620},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1603204697619},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1603204697620},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1603204697620},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1603204697620},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1603204697620},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1603204697636},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1603204697637},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1603204697637},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1603204697637},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1603204697638},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1603204697643},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1603204697637},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1603204697605},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1603204697605},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1603204697605},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1603204697605},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1603204697612},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1603204697612},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1603204697612},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1603204697613},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1603204697612},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1603204697613},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1603204697613},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1603204697614},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1603204697614},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1603204697614},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1603204697615},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1603204697614},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1603204697615},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1603204697621},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1603204697621},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1603204697621},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1603204697622},{"_id":"themes/next/layout/_partials/footer.swig","hash":"5d219a9c158f9ae9842af13707b865766caab625","modified":1603294439323},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1603204697624},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1603204697624},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1603204697627},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1603204697628},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1603204697628},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1603204697629},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1603204697630},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1603204697630},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1603204697631},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1603204697633},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1603204697633},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1603204697638},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1603204697634},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1603204697641},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1603204697641},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1603204697641},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1603204697641},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1603204697642},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1603204697642},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1603204697642},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1603204697643},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1603204697643},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1603204697643},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1603204697643},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1603204697643},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1603204697644},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1603204697644},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1603204697644},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1603204697644},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1603204697645},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1603204697645},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1603204697645},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1603204697645},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1603204697661},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1603204697666},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1603204697666},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1603204697666},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1603204697667},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1603204697667},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1603204697667},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1603204697668},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1603204697668},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1603204697668},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1603204697668},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1603204697669},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1603204697668},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1603204697668},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1603204697669},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1603204697669},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1603204697670},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1603204697669},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1603204697670},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1603204697670},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1603204697671},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1603204697672},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1603204697622},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1603204697622},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1603204697623},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1603204697623},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1603204697623},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1603204697623},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1603204697624},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1603204697624},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1603204697624},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1603204697625},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1603204697625},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1603204697625},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1603204697625},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1603204697626},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1603204697626},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1603204697626},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1603204697626},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1603204697627},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1603204697628},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1603204697629},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1603204697629},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1603204697629},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1603204697629},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1603204697630},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1603204697630},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1603204697630},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1603204697631},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1603204697631},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1603204697631},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1603204697631},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1603204697632},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1603204697632},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1603204697632},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1603204697632},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1603204697632},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1603204697633},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1603204697633},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1603204697634},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1603204697634},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1603204697633},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1603204697634},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1603204697635},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1603204697635},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1603204697635},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1603204697635},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1603204697636},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1603204697636},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1603204697636},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1603204697639},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1603204697639},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1603204697639},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1603204697639},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1603204697640},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1603204697640},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1603204697640},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1603204697640},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1603204697640},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1603204697640},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1603204697641},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1603204697665},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1603204697665},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1603204697665},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1603204697665},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1603204697666},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1603204697671},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1603204697671},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1603204697675},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1603204697676},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1603204697646},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1603204697646},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1603204697646},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1603204697651},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1603204697656},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1603204697657},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1603204697656},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1603204697658},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1603204697659},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1603204697659},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1603204697659},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1603204697661},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1603204697654},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1603204697654},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1603204697661},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1603204697662},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1603204697662},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1603204697662},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1603204697662},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1603204697662},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1603204697663},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1603204697663},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1603204697663},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1603204697663},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1603204697663},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1603204697663},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1603204697664},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1603204697664},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1603204697664},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1603204697664},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1603204697664},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1603204697664},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1603204697673},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1603204697674},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1603204697647},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1603204697647},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1603204697647},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1603204697647},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1603204697647},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1603204697648},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1603204697648},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1603204697648},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1603204697649},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1603204697649},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1603204697649},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1603204697649},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1603204697649},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1603204697650},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1603204697650},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1603204697650},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1603204697651},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1603204697651},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1603204697651},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1603204697651},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1603204697652},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1603204697652},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1603204697652},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1603204697657},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1603204697657},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1603204697657},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1603204697658},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1603204697659},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1603204697660},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1603204697660},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1603204697660},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1603204697660},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1603204697660},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1603204697661},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1603204697653},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1603204697653},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1603204697653},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1603204697653},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1603204697653},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1603204697654},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1603204697654},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1603204697654},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1603204697654},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1603204697655},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1603204697655},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1603204697655},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1603204697655},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1603204697655},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1603204697655},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1603204697656},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1603204697656},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1603204697656},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1603204697673},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1603204697674},{"_id":"themes/next/package-lock.json","hash":"127b1e9dcc76555aeb7190e774b637a25f69f6b1","modified":1603205076850},{"_id":"source/about/index.md","hash":"2fa32d2ef88ae43f4f9e30304eea2400d1c44608","modified":1603211915076},{"_id":"public/about/index.html","hash":"3b896150ffb3e0cd2eecb2ef4d389b5bc628c943","modified":1605194352091},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1603205423614},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1603205423614},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1603205423614},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1603205423614},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1603205423614},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1603205423614},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1603205423614},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1603205423614},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1603205423614},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1603205423614},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1603205423614},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1603205423614},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1603205423614},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1603205423614},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1603205423614},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1603205423614},{"_id":"public/css/main.css","hash":"ea362889838b71d2906e49ed204c9f71d665d617","modified":1603205423614},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1603205423614},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1603205423614},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1603205423614},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1603205423614},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1603205423614},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1603205423614},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1603205423614},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1603205423614},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1603205423614},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1603205423614},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1603205423614},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1603205423614},{"_id":"source/_posts/博客切换.md","hash":"e89080b69d44aca48cfeddcb82d9c82a569f49f7","modified":1603209957693},{"_id":"public/2020/10/21/博客切换/index.html","hash":"5f944e8f3930f5648f306761768a255266524ee6","modified":1605194352091},{"_id":"source/_posts/ubuntu20-04编译vlc.md","hash":"c3030eff18c87635538351814418ceeb10a8286c","modified":1604502883260},{"_id":"public/2020/11/04/ubuntu20-04编译vlc/index.html","hash":"90a8952b4b069e5119b1f4a9a656d8f3a7fa37bc","modified":1605194352091},{"_id":"public/archives/2020/11/index.html","hash":"debe28589bd09eda8fff3d4a62008547bc47d426","modified":1605194352091},{"_id":"source/_posts/ffmpeg源码分析之codec-list.md","hash":"fca06e94c85630c909a00d978715fec5480b2024","modified":1605194592820},{"_id":"source/_posts/ffmpeg结构体分析之AVCodec.md","hash":"9022462da5d4e13bf344a4a2475991d538fc7205","modified":1604938817755},{"_id":"public/2020/11/13/ffmpeg源码分析之codec-list/index.html","hash":"2ba689fc04d57e3c083f438a1398b7d9087b22f0","modified":1605194597642},{"_id":"public/2020/11/10/ffmpeg结构体分析之AVCodec/index.html","hash":"1cdbf7861b6a7828d1e14d90c94fd11e17a3d9e4","modified":1605194352091}],"Category":[],"Data":[],"Page":[{"title":"关于我","date":"2020-10-20T22:49:09.000Z","comments":0,"_content":"### **时间**：\n&nbsp;&nbsp;&nbsp;&nbsp;2006年，去了四川成都读书，男女比例失调的那所工科院校，但校园有最美的银杏树  \n&nbsp;&nbsp;&nbsp;&nbsp;2013年，研究生毕业去了苏州  \n&nbsp;&nbsp;&nbsp;&nbsp;2014年，从苏州来到了杭州  \n### **公司**\n&nbsp;&nbsp;&nbsp;&nbsp;因为GPU的工作，去了苏州的公司，工作事宜是打杂？客户问题，客户代码移植，论坛问题回答……  \n&nbsp;&nbsp;&nbsp;&nbsp;在杭州，待过指纹识别的公司、待过现在大热的视频会议系统公司、也待过号称国内第xx名的某云计算公司  \n&nbsp;&nbsp;&nbsp;&nbsp;现在在某初创公司，公司主营视频图像处理方面  \n### **个人技能**\n&nbsp;&nbsp;&nbsp;&nbsp;PC端/手机端GPU HPC， CUDA、OpenCL、OpenGL ES、Metal \n&nbsp;&nbsp;&nbsp;&nbsp;熟悉CUDA方面的库，例如cudnn,以及tensorRT等  \n&nbsp;&nbsp;&nbsp;&nbsp;熟悉tensorflow lite,MNN,MACE源码，二次开发过或者fix 过bug  \n&nbsp;&nbsp;&nbsp;&nbsp;熟悉安卓/iOS开发  \n&nbsp;&nbsp;&nbsp;&nbsp;了解常见的图像处理算法和视频编解码  \n&nbsp;&nbsp;&nbsp;&nbsp;语言技能 C++/C, swift, python, java\n### **联系方式**\n&nbsp;&nbsp;&nbsp;&nbsp;邮箱: wcj0626@yeah.net\n&nbsp;&nbsp;&nbsp;&nbsp;微信/qq: 315182678","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2020-10-20 22:49:09\ncomments: false\n---\n### **时间**：\n&nbsp;&nbsp;&nbsp;&nbsp;2006年，去了四川成都读书，男女比例失调的那所工科院校，但校园有最美的银杏树  \n&nbsp;&nbsp;&nbsp;&nbsp;2013年，研究生毕业去了苏州  \n&nbsp;&nbsp;&nbsp;&nbsp;2014年，从苏州来到了杭州  \n### **公司**\n&nbsp;&nbsp;&nbsp;&nbsp;因为GPU的工作，去了苏州的公司，工作事宜是打杂？客户问题，客户代码移植，论坛问题回答……  \n&nbsp;&nbsp;&nbsp;&nbsp;在杭州，待过指纹识别的公司、待过现在大热的视频会议系统公司、也待过号称国内第xx名的某云计算公司  \n&nbsp;&nbsp;&nbsp;&nbsp;现在在某初创公司，公司主营视频图像处理方面  \n### **个人技能**\n&nbsp;&nbsp;&nbsp;&nbsp;PC端/手机端GPU HPC， CUDA、OpenCL、OpenGL ES、Metal \n&nbsp;&nbsp;&nbsp;&nbsp;熟悉CUDA方面的库，例如cudnn,以及tensorRT等  \n&nbsp;&nbsp;&nbsp;&nbsp;熟悉tensorflow lite,MNN,MACE源码，二次开发过或者fix 过bug  \n&nbsp;&nbsp;&nbsp;&nbsp;熟悉安卓/iOS开发  \n&nbsp;&nbsp;&nbsp;&nbsp;了解常见的图像处理算法和视频编解码  \n&nbsp;&nbsp;&nbsp;&nbsp;语言技能 C++/C, swift, python, java\n### **联系方式**\n&nbsp;&nbsp;&nbsp;&nbsp;邮箱: wcj0626@yeah.net\n&nbsp;&nbsp;&nbsp;&nbsp;微信/qq: 315182678","updated":"2020-10-20T16:38:35.076Z","path":"about/index.html","_id":"ckgi32kny0000785b0ei54kvg","layout":"page","content":"<h3 id=\"时间：\"><a href=\"#时间：\" class=\"headerlink\" title=\"时间：\"></a><strong>时间</strong>：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;2006年，去了四川成都读书，男女比例失调的那所工科院校，但校园有最美的银杏树<br>&nbsp;&nbsp;&nbsp;&nbsp;2013年，研究生毕业去了苏州<br>&nbsp;&nbsp;&nbsp;&nbsp;2014年，从苏州来到了杭州  </p>\n<h3 id=\"公司\"><a href=\"#公司\" class=\"headerlink\" title=\"公司\"></a><strong>公司</strong></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;因为GPU的工作，去了苏州的公司，工作事宜是打杂？客户问题，客户代码移植，论坛问题回答……<br>&nbsp;&nbsp;&nbsp;&nbsp;在杭州，待过指纹识别的公司、待过现在大热的视频会议系统公司、也待过号称国内第xx名的某云计算公司<br>&nbsp;&nbsp;&nbsp;&nbsp;现在在某初创公司，公司主营视频图像处理方面  </p>\n<h3 id=\"个人技能\"><a href=\"#个人技能\" class=\"headerlink\" title=\"个人技能\"></a><strong>个人技能</strong></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;PC端/手机端GPU HPC， CUDA、OpenCL、OpenGL ES、Metal<br>&nbsp;&nbsp;&nbsp;&nbsp;熟悉CUDA方面的库，例如cudnn,以及tensorRT等<br>&nbsp;&nbsp;&nbsp;&nbsp;熟悉tensorflow lite,MNN,MACE源码，二次开发过或者fix 过bug<br>&nbsp;&nbsp;&nbsp;&nbsp;熟悉安卓/iOS开发<br>&nbsp;&nbsp;&nbsp;&nbsp;了解常见的图像处理算法和视频编解码<br>&nbsp;&nbsp;&nbsp;&nbsp;语言技能 C++/C, swift, python, java</p>\n<h3 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a><strong>联系方式</strong></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;邮箱: <a href=\"mailto:&#x77;&#99;&#x6a;&#x30;&#54;&#50;&#54;&#x40;&#x79;&#x65;&#97;&#104;&#46;&#x6e;&#x65;&#x74;\">&#x77;&#99;&#x6a;&#x30;&#54;&#50;&#54;&#x40;&#x79;&#x65;&#97;&#104;&#46;&#x6e;&#x65;&#x74;</a><br>&nbsp;&nbsp;&nbsp;&nbsp;微信/qq: 315182678</p>\n","site":{"data":{}},"length":805,"excerpt":"","more":"<h3 id=\"时间：\"><a href=\"#时间：\" class=\"headerlink\" title=\"时间：\"></a><strong>时间</strong>：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;2006年，去了四川成都读书，男女比例失调的那所工科院校，但校园有最美的银杏树<br>&nbsp;&nbsp;&nbsp;&nbsp;2013年，研究生毕业去了苏州<br>&nbsp;&nbsp;&nbsp;&nbsp;2014年，从苏州来到了杭州  </p>\n<h3 id=\"公司\"><a href=\"#公司\" class=\"headerlink\" title=\"公司\"></a><strong>公司</strong></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;因为GPU的工作，去了苏州的公司，工作事宜是打杂？客户问题，客户代码移植，论坛问题回答……<br>&nbsp;&nbsp;&nbsp;&nbsp;在杭州，待过指纹识别的公司、待过现在大热的视频会议系统公司、也待过号称国内第xx名的某云计算公司<br>&nbsp;&nbsp;&nbsp;&nbsp;现在在某初创公司，公司主营视频图像处理方面  </p>\n<h3 id=\"个人技能\"><a href=\"#个人技能\" class=\"headerlink\" title=\"个人技能\"></a><strong>个人技能</strong></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;PC端/手机端GPU HPC， CUDA、OpenCL、OpenGL ES、Metal<br>&nbsp;&nbsp;&nbsp;&nbsp;熟悉CUDA方面的库，例如cudnn,以及tensorRT等<br>&nbsp;&nbsp;&nbsp;&nbsp;熟悉tensorflow lite,MNN,MACE源码，二次开发过或者fix 过bug<br>&nbsp;&nbsp;&nbsp;&nbsp;熟悉安卓/iOS开发<br>&nbsp;&nbsp;&nbsp;&nbsp;了解常见的图像处理算法和视频编解码<br>&nbsp;&nbsp;&nbsp;&nbsp;语言技能 C++/C, swift, python, java</p>\n<h3 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a><strong>联系方式</strong></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;邮箱: <a href=\"mailto:&#x77;&#99;&#x6a;&#x30;&#54;&#50;&#54;&#x40;&#x79;&#x65;&#97;&#104;&#46;&#x6e;&#x65;&#x74;\">&#x77;&#99;&#x6a;&#x30;&#54;&#50;&#54;&#x40;&#x79;&#x65;&#97;&#104;&#46;&#x6e;&#x65;&#x74;</a><br>&nbsp;&nbsp;&nbsp;&nbsp;微信/qq: 315182678</p>\n"}],"Post":[{"title":"博客切换","date":"2020-10-20T23:47:26.000Z","_content":"&nbsp;&nbsp;&nbsp;&nbsp;3年前，在腾讯云上用wordpress搭建了个人博客，一次性掏了3年云主机的钱。  \n&nbsp;&nbsp;&nbsp;&nbsp;今天收到短信提示我云主机要续费了，想想算了。还是切换到github.io上吧。反正咱也就一些静态页面。  \n&nbsp;&nbsp;&nbsp;&nbsp;开始切换到新的地方写博客，希望这个可以长久吧。  \n&nbsp;&nbsp;&nbsp;&nbsp;最近给自己学习的动力是熟读vlc源码，希望在新的平台上，博客可以记录自己vlc源码方面的文章吧。","source":"_posts/博客切换.md","raw":"---\ntitle: 博客切换\ndate: 2020-10-20 23:47:26\ntags:\n---\n&nbsp;&nbsp;&nbsp;&nbsp;3年前，在腾讯云上用wordpress搭建了个人博客，一次性掏了3年云主机的钱。  \n&nbsp;&nbsp;&nbsp;&nbsp;今天收到短信提示我云主机要续费了，想想算了。还是切换到github.io上吧。反正咱也就一些静态页面。  \n&nbsp;&nbsp;&nbsp;&nbsp;开始切换到新的地方写博客，希望这个可以长久吧。  \n&nbsp;&nbsp;&nbsp;&nbsp;最近给自己学习的动力是熟读vlc源码，希望在新的平台上，博客可以记录自己vlc源码方面的文章吧。","slug":"博客切换","published":1,"updated":"2020-10-20T16:05:57.693Z","_id":"ckgi55ji40000pv5bedqogi8e","comments":1,"layout":"post","photos":[],"link":"","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;3年前，在腾讯云上用wordpress搭建了个人博客，一次性掏了3年云主机的钱。<br>&nbsp;&nbsp;&nbsp;&nbsp;今天收到短信提示我云主机要续费了，想想算了。还是切换到github.io上吧。反正咱也就一些静态页面。<br>&nbsp;&nbsp;&nbsp;&nbsp;开始切换到新的地方写博客，希望这个可以长久吧。<br>&nbsp;&nbsp;&nbsp;&nbsp;最近给自己学习的动力是熟读vlc源码，希望在新的平台上，博客可以记录自己vlc源码方面的文章吧。</p>\n","site":{"data":{}},"length":258,"excerpt":"","more":"<p>&nbsp;&nbsp;&nbsp;&nbsp;3年前，在腾讯云上用wordpress搭建了个人博客，一次性掏了3年云主机的钱。<br>&nbsp;&nbsp;&nbsp;&nbsp;今天收到短信提示我云主机要续费了，想想算了。还是切换到github.io上吧。反正咱也就一些静态页面。<br>&nbsp;&nbsp;&nbsp;&nbsp;开始切换到新的地方写博客，希望这个可以长久吧。<br>&nbsp;&nbsp;&nbsp;&nbsp;最近给自己学习的动力是熟读vlc源码，希望在新的平台上，博客可以记录自己vlc源码方面的文章吧。</p>\n"},{"title":"ubuntu20.04编译vlc","date":"2020-11-03T22:58:45.000Z","_content":"\n&nbsp;&nbsp;&nbsp;&nbsp;给自己立了一个flag就是熟悉vlc，那熟悉的第一步就是源码编译vlc。弄了一个很干净的环境(docker最新的ubuntu镜像，ubuntu20.04)来记录自己编译vlc中遇到的问题。    \n\n&nbsp;&nbsp;&nbsp;&nbsp;一）源码下载    \n&nbsp;&nbsp;&nbsp;&nbsp;从[官网](https://www.videolan.org/vlc/download-sources.html)或者官方git上拉取代码(git://git.videolan.org/vlc.git)，或者github(https://github.com/videolan/vlc.git)上拉取代码\n```shell\n$ git clone https://github.com/videolan/vlc.git\n```\n&nbsp;&nbsp;&nbsp;&nbsp;二) 依赖库    \n&nbsp;&nbsp;&nbsp;&nbsp;vlc的编译依赖了其他库，在官方的[wiki](https://wiki.videolan.org/UnixCompile/)安装如下库：   \n```shell\n$ apt-get install git build-essential pkg-config libtool automake autopoint gettext\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;三) 编译    \n&nbsp;&nbsp;&nbsp;&nbsp;第一步的基础上，直接贴出操作步骤：\n```shell\n$ cd vlc\n$ ./bootstrap\n```\n&nbsp;&nbsp;&nbsp;&nbsp;1）遇到的第1个问题是：\n```shell\nroot@374051914cd9:~/vlc# ./bootstrap\nERROR: flex is not installed.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install flex\n```\n&nbsp;&nbsp;&nbsp;&nbsp;2）遇到的第2个问题是：\n```shell\nroot@374051914cd9:~/vlc# ./bootstrap\nERROR: GNU bison is not installed.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install bison\n```\n&nbsp;&nbsp;&nbsp;&nbsp;经过如上操作，./bootstrap顺利通过。因为我打算调试vlc，所以我接下里的命令如下:\n```shell\n$ ./configure --enable-debug\n```\n&nbsp;&nbsp;&nbsp;&nbsp;3）遇到的第3个问题是：\n```shell\nchecking for LUA... no\nconfigure: WARNING: No package 'lua5.2' found, trying lua 5.1 instead\nchecking for LUA... no\nconfigure: WARNING: No package 'lua5.1' found, trying lua >= 5.1 instead\nchecking for LUA... no\nconfigure: WARNING: No package 'lua' found, trying manual detection instead\nchecking lua.h usability... no\nchecking lua.h presence... no\nchecking for lua.h... no\nchecking lauxlib.h usability... no\nchecking lauxlib.h presence... no\nchecking for lauxlib.h... no\nchecking lualib.h usability... no\nchecking lualib.h presence... no\nchecking for lualib.h... no\nchecking for luaL_newstate in -llua5.2 ... no\nchecking for luaL_newstate in -llua5.1 ... no\nchecking for luaL_newstate in -llua51 ... no\nchecking for luaL_newstate in -llua ... no\nconfigure: error: Could not find lua. Lua is needed for some interfaces (rc, telnet, http) as well as many other custom scripts. Use --disable-lua to ignore this error.\n\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install lua5.2 liblua5.2-dev \n```    \n&nbsp;&nbsp;&nbsp;&nbsp;4）遇到的第4个问题是：\n```shell\nconfigure: error: Missing libav or FFmpeg. Pass --disable-avcodec to ignore this error.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install libavformat-dev\n```\n&nbsp;&nbsp;&nbsp;&nbsp;5）遇到的第5个问题是：\n```shell\nconfigure: error: No package 'libswscale' found. Pass --disable-swscale to ignore this error. Proper software scaling and some video chroma conversion will be missing.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install libswscale-dev\n```\n&nbsp;&nbsp;&nbsp;&nbsp;6）遇到的第6个问题是：\n```shell\nconfigure: error: Could not find liba52 on your system: you may get it from http://liba52.sf.net/. Alternatively you can use --disable-a52 to disable the a52 plugin.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install liba52-0.7.4-dev\n```\n&nbsp;&nbsp;&nbsp;&nbsp;7）遇到的第7个问题是：\n```shell\nconfigure: error:  No package 'xcb' found. No package 'xcb-composite' found. No package 'xcb-randr' found. No package 'xcb-render' found. No package 'xcb-shm' found. No package 'xcb-xkb' found. No package 'xproto' found. Pass --disable-xcb to skip X11 support.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install libxcb-composite0-dev\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;8）遇到的第8个问题是：\n```shell\nconfigure: error:  No package 'xcb-randr' found. No package 'xcb-shm' found. No package 'xcb-xkb' found. Pass --disable-xcb to skip X11 support.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install libxcb-shm0-dev\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;9）遇到的第9个问题是：\n```shell\nconfigure: error:  No package 'xcb-randr' found. No package 'xcb-xkb' found. Pass --disable-xcb to skip X11 support.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install libxcb-xkb-dev\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;10）遇到的第10个问题是：\n```shell\nconfigure: error:  No package 'xcb-randr' found. Pass --disable-xcb to skip X11 support.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install libxcb-randr0-dev\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;11）遇到的第11个问题是：\n```shell\nconfigure: error: No package 'alsa' found. alsa-lib 1.0.24 or later required. Pass --disable-alsa to ignore this error.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install libasound2-dev \n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;12）遇到的第12个问题是：\n```shell\nchecking for QT... no\nconfigure: error: No package 'Qt5Core' found\nNo package 'Qt5Widgets' found\nNo package 'Qt5Gui' found\nNo package 'Qt5Quick' found\nNo package 'Qt5QuickWidgets' found\nNo package 'Qt5QuickControls2' found\nNo package 'Qt5Svg' found. If you want to build VLC without GUI, pass --disable-qt.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install qtdeclarative5-devel\n```\n&nbsp;&nbsp;&nbsp;&nbsp;13）遇到的第13个问题是：\n```shell\nconfigure: error: No package 'Qt5QuickControls2' found\nNo package 'Qt5Svg' found. If you want to build VLC without GUI, pass --disable-qt.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install libqt5quickcontrols2-5 libqt5svg5\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决了以上问题，终于可以：\n ```shell\n$ make \n$ ./vlc test.mp4\n```\n&nbsp;&nbsp;&nbsp;&nbsp;应该就可以播放界面了。","source":"_posts/ubuntu20-04编译vlc.md","raw":"---\ntitle: ubuntu20.04编译vlc\ndate: 2020-11-03 22:58:45\ntags:\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp;给自己立了一个flag就是熟悉vlc，那熟悉的第一步就是源码编译vlc。弄了一个很干净的环境(docker最新的ubuntu镜像，ubuntu20.04)来记录自己编译vlc中遇到的问题。    \n\n&nbsp;&nbsp;&nbsp;&nbsp;一）源码下载    \n&nbsp;&nbsp;&nbsp;&nbsp;从[官网](https://www.videolan.org/vlc/download-sources.html)或者官方git上拉取代码(git://git.videolan.org/vlc.git)，或者github(https://github.com/videolan/vlc.git)上拉取代码\n```shell\n$ git clone https://github.com/videolan/vlc.git\n```\n&nbsp;&nbsp;&nbsp;&nbsp;二) 依赖库    \n&nbsp;&nbsp;&nbsp;&nbsp;vlc的编译依赖了其他库，在官方的[wiki](https://wiki.videolan.org/UnixCompile/)安装如下库：   \n```shell\n$ apt-get install git build-essential pkg-config libtool automake autopoint gettext\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;三) 编译    \n&nbsp;&nbsp;&nbsp;&nbsp;第一步的基础上，直接贴出操作步骤：\n```shell\n$ cd vlc\n$ ./bootstrap\n```\n&nbsp;&nbsp;&nbsp;&nbsp;1）遇到的第1个问题是：\n```shell\nroot@374051914cd9:~/vlc# ./bootstrap\nERROR: flex is not installed.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install flex\n```\n&nbsp;&nbsp;&nbsp;&nbsp;2）遇到的第2个问题是：\n```shell\nroot@374051914cd9:~/vlc# ./bootstrap\nERROR: GNU bison is not installed.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install bison\n```\n&nbsp;&nbsp;&nbsp;&nbsp;经过如上操作，./bootstrap顺利通过。因为我打算调试vlc，所以我接下里的命令如下:\n```shell\n$ ./configure --enable-debug\n```\n&nbsp;&nbsp;&nbsp;&nbsp;3）遇到的第3个问题是：\n```shell\nchecking for LUA... no\nconfigure: WARNING: No package 'lua5.2' found, trying lua 5.1 instead\nchecking for LUA... no\nconfigure: WARNING: No package 'lua5.1' found, trying lua >= 5.1 instead\nchecking for LUA... no\nconfigure: WARNING: No package 'lua' found, trying manual detection instead\nchecking lua.h usability... no\nchecking lua.h presence... no\nchecking for lua.h... no\nchecking lauxlib.h usability... no\nchecking lauxlib.h presence... no\nchecking for lauxlib.h... no\nchecking lualib.h usability... no\nchecking lualib.h presence... no\nchecking for lualib.h... no\nchecking for luaL_newstate in -llua5.2 ... no\nchecking for luaL_newstate in -llua5.1 ... no\nchecking for luaL_newstate in -llua51 ... no\nchecking for luaL_newstate in -llua ... no\nconfigure: error: Could not find lua. Lua is needed for some interfaces (rc, telnet, http) as well as many other custom scripts. Use --disable-lua to ignore this error.\n\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install lua5.2 liblua5.2-dev \n```    \n&nbsp;&nbsp;&nbsp;&nbsp;4）遇到的第4个问题是：\n```shell\nconfigure: error: Missing libav or FFmpeg. Pass --disable-avcodec to ignore this error.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install libavformat-dev\n```\n&nbsp;&nbsp;&nbsp;&nbsp;5）遇到的第5个问题是：\n```shell\nconfigure: error: No package 'libswscale' found. Pass --disable-swscale to ignore this error. Proper software scaling and some video chroma conversion will be missing.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install libswscale-dev\n```\n&nbsp;&nbsp;&nbsp;&nbsp;6）遇到的第6个问题是：\n```shell\nconfigure: error: Could not find liba52 on your system: you may get it from http://liba52.sf.net/. Alternatively you can use --disable-a52 to disable the a52 plugin.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install liba52-0.7.4-dev\n```\n&nbsp;&nbsp;&nbsp;&nbsp;7）遇到的第7个问题是：\n```shell\nconfigure: error:  No package 'xcb' found. No package 'xcb-composite' found. No package 'xcb-randr' found. No package 'xcb-render' found. No package 'xcb-shm' found. No package 'xcb-xkb' found. No package 'xproto' found. Pass --disable-xcb to skip X11 support.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install libxcb-composite0-dev\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;8）遇到的第8个问题是：\n```shell\nconfigure: error:  No package 'xcb-randr' found. No package 'xcb-shm' found. No package 'xcb-xkb' found. Pass --disable-xcb to skip X11 support.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install libxcb-shm0-dev\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;9）遇到的第9个问题是：\n```shell\nconfigure: error:  No package 'xcb-randr' found. No package 'xcb-xkb' found. Pass --disable-xcb to skip X11 support.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install libxcb-xkb-dev\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;10）遇到的第10个问题是：\n```shell\nconfigure: error:  No package 'xcb-randr' found. Pass --disable-xcb to skip X11 support.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install libxcb-randr0-dev\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;11）遇到的第11个问题是：\n```shell\nconfigure: error: No package 'alsa' found. alsa-lib 1.0.24 or later required. Pass --disable-alsa to ignore this error.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install libasound2-dev \n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;12）遇到的第12个问题是：\n```shell\nchecking for QT... no\nconfigure: error: No package 'Qt5Core' found\nNo package 'Qt5Widgets' found\nNo package 'Qt5Gui' found\nNo package 'Qt5Quick' found\nNo package 'Qt5QuickWidgets' found\nNo package 'Qt5QuickControls2' found\nNo package 'Qt5Svg' found. If you want to build VLC without GUI, pass --disable-qt.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install qtdeclarative5-devel\n```\n&nbsp;&nbsp;&nbsp;&nbsp;13）遇到的第13个问题是：\n```shell\nconfigure: error: No package 'Qt5QuickControls2' found\nNo package 'Qt5Svg' found. If you want to build VLC without GUI, pass --disable-qt.\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：\n```shell\n$ apt-get install libqt5quickcontrols2-5 libqt5svg5\n```\n&nbsp;&nbsp;&nbsp;&nbsp;解决了以上问题，终于可以：\n ```shell\n$ make \n$ ./vlc test.mp4\n```\n&nbsp;&nbsp;&nbsp;&nbsp;应该就可以播放界面了。","slug":"ubuntu20-04编译vlc","published":1,"updated":"2020-11-04T15:14:43.260Z","_id":"ckh272vfg0000h85bbnim1kgh","comments":1,"layout":"post","photos":[],"link":"","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;给自己立了一个flag就是熟悉vlc，那熟悉的第一步就是源码编译vlc。弄了一个很干净的环境(docker最新的ubuntu镜像，ubuntu20.04)来记录自己编译vlc中遇到的问题。    </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;一）源码下载<br>&nbsp;&nbsp;&nbsp;&nbsp;从<a href=\"https://www.videolan.org/vlc/download-sources.html\">官网</a>或者官方git上拉取代码(git://git.videolan.org/vlc.git)，或者github(<a href=\"https://github.com/videolan/vlc.git)%E4%B8%8A%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81\">https://github.com/videolan/vlc.git)上拉取代码</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/videolan/vlc.git</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;二) 依赖库<br>&nbsp;&nbsp;&nbsp;&nbsp;vlc的编译依赖了其他库，在官方的<a href=\"https://wiki.videolan.org/UnixCompile/\">wiki</a>安装如下库：   </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install git build-essential pkg-config libtool automake autopoint gettext</span></span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;三) 编译<br>&nbsp;&nbsp;&nbsp;&nbsp;第一步的基础上，直接贴出操作步骤：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> vlc</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ./bootstrap</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;1）遇到的第1个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@374051914cd9:~/vlc# ./bootstrap</span><br><span class=\"line\">ERROR: flex is not installed.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install flex</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;2）遇到的第2个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@374051914cd9:~/vlc# ./bootstrap</span><br><span class=\"line\">ERROR: GNU bison is not installed.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install bison</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;经过如上操作，./bootstrap顺利通过。因为我打算调试vlc，所以我接下里的命令如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ./configure --enable-debug</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;3）遇到的第3个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checking for LUA... no</span><br><span class=\"line\">configure: WARNING: No package &#x27;lua5.2&#x27; found, trying lua 5.1 instead</span><br><span class=\"line\">checking for LUA... no</span><br><span class=\"line\">configure: WARNING: No package &#x27;lua5.1&#x27; found, trying lua &gt;= 5.1 instead</span><br><span class=\"line\">checking for LUA... no</span><br><span class=\"line\">configure: WARNING: No package &#x27;lua&#x27; found, trying manual detection instead</span><br><span class=\"line\">checking lua.h usability... no</span><br><span class=\"line\">checking lua.h presence... no</span><br><span class=\"line\">checking for lua.h... no</span><br><span class=\"line\">checking lauxlib.h usability... no</span><br><span class=\"line\">checking lauxlib.h presence... no</span><br><span class=\"line\">checking for lauxlib.h... no</span><br><span class=\"line\">checking lualib.h usability... no</span><br><span class=\"line\">checking lualib.h presence... no</span><br><span class=\"line\">checking for lualib.h... no</span><br><span class=\"line\">checking for luaL_newstate in -llua5.2 ... no</span><br><span class=\"line\">checking for luaL_newstate in -llua5.1 ... no</span><br><span class=\"line\">checking for luaL_newstate in -llua51 ... no</span><br><span class=\"line\">checking for luaL_newstate in -llua ... no</span><br><span class=\"line\">configure: error: Could not find lua. Lua is needed for some interfaces (rc, telnet, http) as well as many other custom scripts. Use --disable-lua to ignore this error.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install lua5.2 liblua5.2-dev </span></span><br><span class=\"line\">```    </span><br><span class=\"line\">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4）遇到的第4个问题是：</span><br><span class=\"line\">```shell</span><br><span class=\"line\">configure: error: Missing libav or FFmpeg. Pass --disable-avcodec to ignore this error.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install libavformat-dev</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;5）遇到的第5个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error: No package &#x27;libswscale&#x27; found. Pass --disable-swscale to ignore this error. Proper software scaling and some video chroma conversion will be missing.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install libswscale-dev</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;6）遇到的第6个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error: Could not find liba52 on your system: you may get it from http://liba52.sf.net/. Alternatively you can use --disable-a52 to disable the a52 plugin.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install liba52-0.7.4-dev</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;7）遇到的第7个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error:  No package &#x27;xcb&#x27; found. No package &#x27;xcb-composite&#x27; found. No package &#x27;xcb-randr&#x27; found. No package &#x27;xcb-render&#x27; found. No package &#x27;xcb-shm&#x27; found. No package &#x27;xcb-xkb&#x27; found. No package &#x27;xproto&#x27; found. Pass --disable-xcb to skip X11 support.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install libxcb-composite0-dev</span></span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;8）遇到的第8个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error:  No package &#x27;xcb-randr&#x27; found. No package &#x27;xcb-shm&#x27; found. No package &#x27;xcb-xkb&#x27; found. Pass --disable-xcb to skip X11 support.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install libxcb-shm0-dev</span></span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;9）遇到的第9个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error:  No package &#x27;xcb-randr&#x27; found. No package &#x27;xcb-xkb&#x27; found. Pass --disable-xcb to skip X11 support.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install libxcb-xkb-dev</span></span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;10）遇到的第10个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error:  No package &#x27;xcb-randr&#x27; found. Pass --disable-xcb to skip X11 support.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install libxcb-randr0-dev</span></span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;11）遇到的第11个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error: No package &#x27;alsa&#x27; found. alsa-lib 1.0.24 or later required. Pass --disable-alsa to ignore this error.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install libasound2-dev </span></span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;12）遇到的第12个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checking for QT... no</span><br><span class=\"line\">configure: error: No package &#x27;Qt5Core&#x27; found</span><br><span class=\"line\">No package &#x27;Qt5Widgets&#x27; found</span><br><span class=\"line\">No package &#x27;Qt5Gui&#x27; found</span><br><span class=\"line\">No package &#x27;Qt5Quick&#x27; found</span><br><span class=\"line\">No package &#x27;Qt5QuickWidgets&#x27; found</span><br><span class=\"line\">No package &#x27;Qt5QuickControls2&#x27; found</span><br><span class=\"line\">No package &#x27;Qt5Svg&#x27; found. If you want to build VLC without GUI, pass --disable-qt.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install qtdeclarative5-devel</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;13）遇到的第13个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error: No package &#x27;Qt5QuickControls2&#x27; found</span><br><span class=\"line\">No package &#x27;Qt5Svg&#x27; found. If you want to build VLC without GUI, pass --disable-qt.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install libqt5quickcontrols2-5 libqt5svg5</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决了以上问题，终于可以：<br> <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> make </span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ./vlc test.mp4</span></span><br></pre></td></tr></table></figure><br>&nbsp;&nbsp;&nbsp;&nbsp;应该就可以播放界面了。</p>\n","site":{"data":{}},"length":4663,"excerpt":"","more":"<p>&nbsp;&nbsp;&nbsp;&nbsp;给自己立了一个flag就是熟悉vlc，那熟悉的第一步就是源码编译vlc。弄了一个很干净的环境(docker最新的ubuntu镜像，ubuntu20.04)来记录自己编译vlc中遇到的问题。    </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;一）源码下载<br>&nbsp;&nbsp;&nbsp;&nbsp;从<a href=\"https://www.videolan.org/vlc/download-sources.html\">官网</a>或者官方git上拉取代码(git://git.videolan.org/vlc.git)，或者github(<a href=\"https://github.com/videolan/vlc.git)%E4%B8%8A%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81\">https://github.com/videolan/vlc.git)上拉取代码</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/videolan/vlc.git</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;二) 依赖库<br>&nbsp;&nbsp;&nbsp;&nbsp;vlc的编译依赖了其他库，在官方的<a href=\"https://wiki.videolan.org/UnixCompile/\">wiki</a>安装如下库：   </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install git build-essential pkg-config libtool automake autopoint gettext</span></span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;三) 编译<br>&nbsp;&nbsp;&nbsp;&nbsp;第一步的基础上，直接贴出操作步骤：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> vlc</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ./bootstrap</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;1）遇到的第1个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@374051914cd9:~/vlc# ./bootstrap</span><br><span class=\"line\">ERROR: flex is not installed.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install flex</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;2）遇到的第2个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@374051914cd9:~/vlc# ./bootstrap</span><br><span class=\"line\">ERROR: GNU bison is not installed.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install bison</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;经过如上操作，./bootstrap顺利通过。因为我打算调试vlc，所以我接下里的命令如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ./configure --enable-debug</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;3）遇到的第3个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checking for LUA... no</span><br><span class=\"line\">configure: WARNING: No package &#x27;lua5.2&#x27; found, trying lua 5.1 instead</span><br><span class=\"line\">checking for LUA... no</span><br><span class=\"line\">configure: WARNING: No package &#x27;lua5.1&#x27; found, trying lua &gt;= 5.1 instead</span><br><span class=\"line\">checking for LUA... no</span><br><span class=\"line\">configure: WARNING: No package &#x27;lua&#x27; found, trying manual detection instead</span><br><span class=\"line\">checking lua.h usability... no</span><br><span class=\"line\">checking lua.h presence... no</span><br><span class=\"line\">checking for lua.h... no</span><br><span class=\"line\">checking lauxlib.h usability... no</span><br><span class=\"line\">checking lauxlib.h presence... no</span><br><span class=\"line\">checking for lauxlib.h... no</span><br><span class=\"line\">checking lualib.h usability... no</span><br><span class=\"line\">checking lualib.h presence... no</span><br><span class=\"line\">checking for lualib.h... no</span><br><span class=\"line\">checking for luaL_newstate in -llua5.2 ... no</span><br><span class=\"line\">checking for luaL_newstate in -llua5.1 ... no</span><br><span class=\"line\">checking for luaL_newstate in -llua51 ... no</span><br><span class=\"line\">checking for luaL_newstate in -llua ... no</span><br><span class=\"line\">configure: error: Could not find lua. Lua is needed for some interfaces (rc, telnet, http) as well as many other custom scripts. Use --disable-lua to ignore this error.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install lua5.2 liblua5.2-dev </span></span><br><span class=\"line\">```    </span><br><span class=\"line\">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4）遇到的第4个问题是：</span><br><span class=\"line\">```shell</span><br><span class=\"line\">configure: error: Missing libav or FFmpeg. Pass --disable-avcodec to ignore this error.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install libavformat-dev</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;5）遇到的第5个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error: No package &#x27;libswscale&#x27; found. Pass --disable-swscale to ignore this error. Proper software scaling and some video chroma conversion will be missing.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install libswscale-dev</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;6）遇到的第6个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error: Could not find liba52 on your system: you may get it from http://liba52.sf.net/. Alternatively you can use --disable-a52 to disable the a52 plugin.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install liba52-0.7.4-dev</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;7）遇到的第7个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error:  No package &#x27;xcb&#x27; found. No package &#x27;xcb-composite&#x27; found. No package &#x27;xcb-randr&#x27; found. No package &#x27;xcb-render&#x27; found. No package &#x27;xcb-shm&#x27; found. No package &#x27;xcb-xkb&#x27; found. No package &#x27;xproto&#x27; found. Pass --disable-xcb to skip X11 support.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install libxcb-composite0-dev</span></span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;8）遇到的第8个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error:  No package &#x27;xcb-randr&#x27; found. No package &#x27;xcb-shm&#x27; found. No package &#x27;xcb-xkb&#x27; found. Pass --disable-xcb to skip X11 support.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install libxcb-shm0-dev</span></span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;9）遇到的第9个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error:  No package &#x27;xcb-randr&#x27; found. No package &#x27;xcb-xkb&#x27; found. Pass --disable-xcb to skip X11 support.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install libxcb-xkb-dev</span></span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;10）遇到的第10个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error:  No package &#x27;xcb-randr&#x27; found. Pass --disable-xcb to skip X11 support.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install libxcb-randr0-dev</span></span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;11）遇到的第11个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error: No package &#x27;alsa&#x27; found. alsa-lib 1.0.24 or later required. Pass --disable-alsa to ignore this error.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install libasound2-dev </span></span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;12）遇到的第12个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checking for QT... no</span><br><span class=\"line\">configure: error: No package &#x27;Qt5Core&#x27; found</span><br><span class=\"line\">No package &#x27;Qt5Widgets&#x27; found</span><br><span class=\"line\">No package &#x27;Qt5Gui&#x27; found</span><br><span class=\"line\">No package &#x27;Qt5Quick&#x27; found</span><br><span class=\"line\">No package &#x27;Qt5QuickWidgets&#x27; found</span><br><span class=\"line\">No package &#x27;Qt5QuickControls2&#x27; found</span><br><span class=\"line\">No package &#x27;Qt5Svg&#x27; found. If you want to build VLC without GUI, pass --disable-qt.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install qtdeclarative5-devel</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;13）遇到的第13个问题是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error: No package &#x27;Qt5QuickControls2&#x27; found</span><br><span class=\"line\">No package &#x27;Qt5Svg&#x27; found. If you want to build VLC without GUI, pass --disable-qt.</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法嘛：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> apt-get install libqt5quickcontrols2-5 libqt5svg5</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;解决了以上问题，终于可以：<br> <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> make </span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ./vlc test.mp4</span></span><br></pre></td></tr></table></figure><br>&nbsp;&nbsp;&nbsp;&nbsp;应该就可以播放界面了。</p>\n"},{"title":"ffmpeg源码分析之codec_list","date":"2020-11-12T22:58:54.000Z","_content":"&nbsp;&nbsp;&nbsp;&nbsp;在看ffmpeg自带example中的encoder_video.c的源码，遇到的第一个ffmpeg函数就是avcodec_find_encoder_by_name，最后跳转到av_codec_iterate函数，函数内部code_list的AVCodec数组，搜索整个目录发现只有在libavcodec/allcodes.c中定义为：\n```c\n#if CONFIG_OSSFUZZ\nAVCodec * codec_list[] = {\n    NULL,\n    NULL,\n    NULL\n};\n#else\n#include \"libavcodec/codec_list.c\"\n#endif\n```\n&nbsp;&nbsp;&nbsp;&nbsp;显然是走到else分支，但是codec_list.c文件却没有找到。**最后发现竟然是在./configure的时候生成的。**    \n&nbsp;&nbsp;&nbsp;&nbsp;在configure文件中，搜到如下代码：\n```shell\n...\nfind_things_extern(){\n    thing=$1\n    pattern=$2\n    file=$source_path/$3\n    out=${4:-$thing}\n    sed -n \"s/^[^#]*extern.*$pattern *ff_\\([^ ]*\\)_$thing;/\\1_$out/p\" \"$file\"\n}\n\nfind_filters_extern(){\n    file=$source_path/$1\n    sed -n 's/^extern AVFilter ff_[avfsinkrc]\\{2,5\\}_\\([[:alnum:]_]\\{1,\\}\\);/\\1_filter/p' $file\n}\n\nFILTER_LIST=$(find_filters_extern libavfilter/allfilters.c)\nOUTDEV_LIST=$(find_things_extern muxer AVOutputFormat libavdevice/alldevices.c outdev)\nINDEV_LIST=$(find_things_extern demuxer AVInputFormat libavdevice/alldevices.c indev)\nMUXER_LIST=$(find_things_extern muxer AVOutputFormat libavformat/allformats.c)\nDEMUXER_LIST=$(find_things_extern demuxer AVInputFormat libavformat/allformats.c)\nENCODER_LIST=$(find_things_extern encoder AVCodec libavcodec/allcodecs.c)\nDECODER_LIST=$(find_things_extern decoder AVCodec libavcodec/allcodecs.c)\nCODEC_LIST=\"\n    $ENCODER_LIST\n    $DECODER_LIST\n\"\n...\n\n# generate the lists of enabled components\nprint_enabled_components(){\n    file=$1\n    struct_name=$2\n    name=$3\n    shift 3\n    echo \"static const $struct_name * const $name[] = {\" > $TMPH\n    for c in $*; do\n        if enabled $c; then\n            case $name in\n                filter_list)\n                    eval c=\\$full_filter_name_${c%_filter}\n                ;;\n                indev_list)\n                    c=${c%_indev}_demuxer\n                ;;\n                outdev_list)\n                    c=${c%_outdev}_muxer\n                ;;\n            esac\n            printf \"    &ff_%s,\\n\" $c >> $TMPH\n        fi\n    done\n    if [ \"$name\" = \"filter_list\" ]; then\n        for c in asrc_abuffer vsrc_buffer asink_abuffer vsink_buffer; do\n            printf \"    &ff_%s,\\n\" $c >> $TMPH\n        done\n    fi\n    echo \"    NULL };\" >> $TMPH\n    cp_if_changed $TMPH $file\n}\n\nprint_enabled_components libavfilter/filter_list.c AVFilter filter_list $FILTER_LIST\nprint_enabled_components libavcodec/codec_list.c AVCodec codec_list $CODEC_LIST\nprint_enabled_components libavcodec/parser_list.c AVCodecParser parser_list $PARSER_LIST\nprint_enabled_components libavcodec/bsf_list.c AVBitStreamFilter bitstream_filters $BSF_LIST\nprint_enabled_components libavformat/demuxer_list.c AVInputFormat demuxer_list $DEMUXER_LIST\nprint_enabled_components libavformat/muxer_list.c AVOutputFormat muxer_list $MUXER_LIST\nprint_enabled_components libavdevice/indev_list.c AVInputFormat indev_list $INDEV_LIST\nprint_enabled_components libavdevice/outdev_list.c AVOutputFormat outdev_list $OUTDEV_LIST\nprint_enabled_components libavformat/protocol_list.c URLProtocol url_protocols $PROTOCOL_LIST\n```\n&nbsp;&nbsp;&nbsp;&nbsp;看到以上代码，舒了一口气，codec_list.c终于找到了。正则表达式去查找libavcodec/allcodecs.c中声明的encoder和decoder，\n```c\n...\nextern AVCodec ff_a64multi_encoder;\nextern AVCodec ff_a64multi5_encoder;\nextern AVCodec ff_aasc_decoder;\nextern AVCodec ff_aic_decoder;\nextern AVCodec ff_alias_pix_encoder;\nextern AVCodec ff_alias_pix_decoder;\nextern AVCodec ff_agm_decoder;\nextern AVCodec ff_amv_encoder;\nextern AVCodec ff_amv_decoder;\nextern AVCodec ff_anm_decoder;\nextern AVCodec ff_ansi_decoder;\nextern AVCodec ff_apng_encoder;\nextern AVCodec ff_apng_decoder;\nextern AVCodec ff_arbc_decoder;\nextern AVCodec ff_argo_decoder;\nextern AVCodec ff_asv1_encoder;\nextern AVCodec ff_asv1_decoder;\nextern AVCodec ff_asv2_encoder;\nextern AVCodec ff_asv2_decoder;\nextern AVCodec ff_aura_decoder;\nextern AVCodec ff_aura2_decoder;\nextern AVCodec ff_avrp_encoder;\nextern AVCodec ff_avrp_decoder;\nextern AVCodec ff_avrn_decoder;\nextern AVCodec ff_avs_decoder;\nextern AVCodec ff_avui_encoder;\nextern AVCodec ff_avui_decoder;\nextern AVCodec ff_ayuv_encoder;\nextern AVCodec ff_ayuv_decoder;\nextern AVCodec ff_bethsoftvid_decoder;\nextern AVCodec ff_bfi_decoder;\nextern AVCodec ff_bink_decoder;\nextern AVCodec ff_bitpacked_decoder;\nextern AVCodec ff_bmp_encoder;\n...\n```\n---------\n&nbsp;&nbsp;&nbsp;&nbsp;题外话插一句：对我而言，开源项目认真看了的项目是tensorflow lite，MACE和MNN，最近才开始认真阅读ffmpeg的源码，但给我带来的冲击远比其他开源项目大，感慨c原来也可以这么玩。","source":"_posts/ffmpeg源码分析之codec-list.md","raw":"---\ntitle: ffmpeg源码分析之codec_list\ndate: 2020-11-12 22:58:54\ntags:\n---\n&nbsp;&nbsp;&nbsp;&nbsp;在看ffmpeg自带example中的encoder_video.c的源码，遇到的第一个ffmpeg函数就是avcodec_find_encoder_by_name，最后跳转到av_codec_iterate函数，函数内部code_list的AVCodec数组，搜索整个目录发现只有在libavcodec/allcodes.c中定义为：\n```c\n#if CONFIG_OSSFUZZ\nAVCodec * codec_list[] = {\n    NULL,\n    NULL,\n    NULL\n};\n#else\n#include \"libavcodec/codec_list.c\"\n#endif\n```\n&nbsp;&nbsp;&nbsp;&nbsp;显然是走到else分支，但是codec_list.c文件却没有找到。**最后发现竟然是在./configure的时候生成的。**    \n&nbsp;&nbsp;&nbsp;&nbsp;在configure文件中，搜到如下代码：\n```shell\n...\nfind_things_extern(){\n    thing=$1\n    pattern=$2\n    file=$source_path/$3\n    out=${4:-$thing}\n    sed -n \"s/^[^#]*extern.*$pattern *ff_\\([^ ]*\\)_$thing;/\\1_$out/p\" \"$file\"\n}\n\nfind_filters_extern(){\n    file=$source_path/$1\n    sed -n 's/^extern AVFilter ff_[avfsinkrc]\\{2,5\\}_\\([[:alnum:]_]\\{1,\\}\\);/\\1_filter/p' $file\n}\n\nFILTER_LIST=$(find_filters_extern libavfilter/allfilters.c)\nOUTDEV_LIST=$(find_things_extern muxer AVOutputFormat libavdevice/alldevices.c outdev)\nINDEV_LIST=$(find_things_extern demuxer AVInputFormat libavdevice/alldevices.c indev)\nMUXER_LIST=$(find_things_extern muxer AVOutputFormat libavformat/allformats.c)\nDEMUXER_LIST=$(find_things_extern demuxer AVInputFormat libavformat/allformats.c)\nENCODER_LIST=$(find_things_extern encoder AVCodec libavcodec/allcodecs.c)\nDECODER_LIST=$(find_things_extern decoder AVCodec libavcodec/allcodecs.c)\nCODEC_LIST=\"\n    $ENCODER_LIST\n    $DECODER_LIST\n\"\n...\n\n# generate the lists of enabled components\nprint_enabled_components(){\n    file=$1\n    struct_name=$2\n    name=$3\n    shift 3\n    echo \"static const $struct_name * const $name[] = {\" > $TMPH\n    for c in $*; do\n        if enabled $c; then\n            case $name in\n                filter_list)\n                    eval c=\\$full_filter_name_${c%_filter}\n                ;;\n                indev_list)\n                    c=${c%_indev}_demuxer\n                ;;\n                outdev_list)\n                    c=${c%_outdev}_muxer\n                ;;\n            esac\n            printf \"    &ff_%s,\\n\" $c >> $TMPH\n        fi\n    done\n    if [ \"$name\" = \"filter_list\" ]; then\n        for c in asrc_abuffer vsrc_buffer asink_abuffer vsink_buffer; do\n            printf \"    &ff_%s,\\n\" $c >> $TMPH\n        done\n    fi\n    echo \"    NULL };\" >> $TMPH\n    cp_if_changed $TMPH $file\n}\n\nprint_enabled_components libavfilter/filter_list.c AVFilter filter_list $FILTER_LIST\nprint_enabled_components libavcodec/codec_list.c AVCodec codec_list $CODEC_LIST\nprint_enabled_components libavcodec/parser_list.c AVCodecParser parser_list $PARSER_LIST\nprint_enabled_components libavcodec/bsf_list.c AVBitStreamFilter bitstream_filters $BSF_LIST\nprint_enabled_components libavformat/demuxer_list.c AVInputFormat demuxer_list $DEMUXER_LIST\nprint_enabled_components libavformat/muxer_list.c AVOutputFormat muxer_list $MUXER_LIST\nprint_enabled_components libavdevice/indev_list.c AVInputFormat indev_list $INDEV_LIST\nprint_enabled_components libavdevice/outdev_list.c AVOutputFormat outdev_list $OUTDEV_LIST\nprint_enabled_components libavformat/protocol_list.c URLProtocol url_protocols $PROTOCOL_LIST\n```\n&nbsp;&nbsp;&nbsp;&nbsp;看到以上代码，舒了一口气，codec_list.c终于找到了。正则表达式去查找libavcodec/allcodecs.c中声明的encoder和decoder，\n```c\n...\nextern AVCodec ff_a64multi_encoder;\nextern AVCodec ff_a64multi5_encoder;\nextern AVCodec ff_aasc_decoder;\nextern AVCodec ff_aic_decoder;\nextern AVCodec ff_alias_pix_encoder;\nextern AVCodec ff_alias_pix_decoder;\nextern AVCodec ff_agm_decoder;\nextern AVCodec ff_amv_encoder;\nextern AVCodec ff_amv_decoder;\nextern AVCodec ff_anm_decoder;\nextern AVCodec ff_ansi_decoder;\nextern AVCodec ff_apng_encoder;\nextern AVCodec ff_apng_decoder;\nextern AVCodec ff_arbc_decoder;\nextern AVCodec ff_argo_decoder;\nextern AVCodec ff_asv1_encoder;\nextern AVCodec ff_asv1_decoder;\nextern AVCodec ff_asv2_encoder;\nextern AVCodec ff_asv2_decoder;\nextern AVCodec ff_aura_decoder;\nextern AVCodec ff_aura2_decoder;\nextern AVCodec ff_avrp_encoder;\nextern AVCodec ff_avrp_decoder;\nextern AVCodec ff_avrn_decoder;\nextern AVCodec ff_avs_decoder;\nextern AVCodec ff_avui_encoder;\nextern AVCodec ff_avui_decoder;\nextern AVCodec ff_ayuv_encoder;\nextern AVCodec ff_ayuv_decoder;\nextern AVCodec ff_bethsoftvid_decoder;\nextern AVCodec ff_bfi_decoder;\nextern AVCodec ff_bink_decoder;\nextern AVCodec ff_bitpacked_decoder;\nextern AVCodec ff_bmp_encoder;\n...\n```\n---------\n&nbsp;&nbsp;&nbsp;&nbsp;题外话插一句：对我而言，开源项目认真看了的项目是tensorflow lite，MACE和MNN，最近才开始认真阅读ffmpeg的源码，但给我带来的冲击远比其他开源项目大，感慨c原来也可以这么玩。","slug":"ffmpeg源码分析之codec-list","published":1,"updated":"2020-11-12T15:23:42.777Z","_id":"ckhez9tjc0000bvhi8sfd2nmc","comments":1,"layout":"post","photos":[],"link":"","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;在看ffmpeg自带example中的encoder_video.c的源码，遇到的第一个ffmpeg函数就是avcodec_find_encoder_by_name，最后跳转到av_codec_iterate函数，函数内部code_list的AVCodec数组，搜索整个目录发现只有在libavcodec/allcodes.c中定义为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> CONFIG_OSSFUZZ</span></span><br><span class=\"line\">AVCodec * codec_list[] = &#123;</span><br><span class=\"line\">    <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    <span class=\"literal\">NULL</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;libavcodec/codec_list.c&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;显然是走到else分支，但是codec_list.c文件却没有找到。<strong>最后发现竟然是在./configure的时候生成的。</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;在configure文件中，搜到如下代码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">find_things_extern()&#123;</span><br><span class=\"line\">    thing=$1</span><br><span class=\"line\">    pattern=$2</span><br><span class=\"line\">    file=$source_path/$3</span><br><span class=\"line\">    out=$&#123;4:-$thing&#125;</span><br><span class=\"line\">    sed -n &quot;s/^[^#]*extern.*$pattern *ff_\\([^ ]*\\)_$thing;/\\1_$out/p&quot; &quot;$file&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">find_filters_extern()&#123;</span><br><span class=\"line\">    file=$source_path/$1</span><br><span class=\"line\">    sed -n &#x27;s/^extern AVFilter ff_[avfsinkrc]\\&#123;2,5\\&#125;_\\([[:alnum:]_]\\&#123;1,\\&#125;\\);/\\1_filter/p&#x27; $file</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FILTER_LIST=$(find_filters_extern libavfilter/allfilters.c)</span><br><span class=\"line\">OUTDEV_LIST=$(find_things_extern muxer AVOutputFormat libavdevice/alldevices.c outdev)</span><br><span class=\"line\">INDEV_LIST=$(find_things_extern demuxer AVInputFormat libavdevice/alldevices.c indev)</span><br><span class=\"line\">MUXER_LIST=$(find_things_extern muxer AVOutputFormat libavformat/allformats.c)</span><br><span class=\"line\">DEMUXER_LIST=$(find_things_extern demuxer AVInputFormat libavformat/allformats.c)</span><br><span class=\"line\">ENCODER_LIST=$(find_things_extern encoder AVCodec libavcodec/allcodecs.c)</span><br><span class=\"line\">DECODER_LIST=$(find_things_extern decoder AVCodec libavcodec/allcodecs.c)</span><br><span class=\"line\">CODEC_LIST=&quot;</span><br><span class=\"line\">    $ENCODER_LIST</span><br><span class=\"line\">    $DECODER_LIST</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> generate the lists of enabled components</span></span><br><span class=\"line\">print_enabled_components()&#123;</span><br><span class=\"line\">    file=$1</span><br><span class=\"line\">    struct_name=$2</span><br><span class=\"line\">    name=$3</span><br><span class=\"line\">    shift 3</span><br><span class=\"line\">    echo &quot;static const $struct_name * const $name[] = &#123;&quot; &gt; $TMPH</span><br><span class=\"line\">    for c in $*; do</span><br><span class=\"line\">        if enabled $c; then</span><br><span class=\"line\">            case $name in</span><br><span class=\"line\">                filter_list)</span><br><span class=\"line\">                    eval c=\\$full_filter_name_$&#123;c%_filter&#125;</span><br><span class=\"line\">                ;;</span><br><span class=\"line\">                indev_list)</span><br><span class=\"line\">                    c=$&#123;c%_indev&#125;_demuxer</span><br><span class=\"line\">                ;;</span><br><span class=\"line\">                outdev_list)</span><br><span class=\"line\">                    c=$&#123;c%_outdev&#125;_muxer</span><br><span class=\"line\">                ;;</span><br><span class=\"line\">            esac</span><br><span class=\"line\">            printf &quot;    &amp;ff_%s,\\n&quot; $c &gt;&gt; $TMPH</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    done</span><br><span class=\"line\">    if [ &quot;$name&quot; = &quot;filter_list&quot; ]; then</span><br><span class=\"line\">        for c in asrc_abuffer vsrc_buffer asink_abuffer vsink_buffer; do</span><br><span class=\"line\">            printf &quot;    &amp;ff_%s,\\n&quot; $c &gt;&gt; $TMPH</span><br><span class=\"line\">        done</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    echo &quot;    NULL &#125;;&quot; &gt;&gt; $TMPH</span><br><span class=\"line\">    cp_if_changed $TMPH $file</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">print_enabled_components libavfilter/filter_list.c AVFilter filter_list $FILTER_LIST</span><br><span class=\"line\">print_enabled_components libavcodec/codec_list.c AVCodec codec_list $CODEC_LIST</span><br><span class=\"line\">print_enabled_components libavcodec/parser_list.c AVCodecParser parser_list $PARSER_LIST</span><br><span class=\"line\">print_enabled_components libavcodec/bsf_list.c AVBitStreamFilter bitstream_filters $BSF_LIST</span><br><span class=\"line\">print_enabled_components libavformat/demuxer_list.c AVInputFormat demuxer_list $DEMUXER_LIST</span><br><span class=\"line\">print_enabled_components libavformat/muxer_list.c AVOutputFormat muxer_list $MUXER_LIST</span><br><span class=\"line\">print_enabled_components libavdevice/indev_list.c AVInputFormat indev_list $INDEV_LIST</span><br><span class=\"line\">print_enabled_components libavdevice/outdev_list.c AVOutputFormat outdev_list $OUTDEV_LIST</span><br><span class=\"line\">print_enabled_components libavformat/protocol_list.c URLProtocol url_protocols $PROTOCOL_LIST</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;看到以上代码，舒了一口气，codec_list.c终于找到了。正则表达式去查找libavcodec/allcodecs.c中声明的encoder和decoder，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_a64multi_encoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_a64multi5_encoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_aasc_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_aic_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_alias_pix_encoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_alias_pix_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_agm_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_amv_encoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_amv_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_anm_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_ansi_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_apng_encoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_apng_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_arbc_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_argo_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_asv1_encoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_asv1_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_asv2_encoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_asv2_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_aura_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_aura2_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_avrp_encoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_avrp_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_avrn_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_avs_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_avui_encoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_avui_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_ayuv_encoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_ayuv_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_bethsoftvid_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_bfi_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_bink_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_bitpacked_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_bmp_encoder;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<hr>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;题外话插一句：对我而言，开源项目认真看了的项目是tensorflow lite，MACE和MNN，最近才开始认真阅读ffmpeg的源码，但给我带来的冲击远比其他开源项目大，感慨c原来也可以这么玩。</p>\n","site":{"data":{}},"length":4199,"excerpt":"","more":"<p>&nbsp;&nbsp;&nbsp;&nbsp;在看ffmpeg自带example中的encoder_video.c的源码，遇到的第一个ffmpeg函数就是avcodec_find_encoder_by_name，最后跳转到av_codec_iterate函数，函数内部code_list的AVCodec数组，搜索整个目录发现只有在libavcodec/allcodes.c中定义为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> CONFIG_OSSFUZZ</span></span><br><span class=\"line\">AVCodec * codec_list[] = &#123;</span><br><span class=\"line\">    <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    <span class=\"literal\">NULL</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;libavcodec/codec_list.c&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;显然是走到else分支，但是codec_list.c文件却没有找到。<strong>最后发现竟然是在./configure的时候生成的。</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;在configure文件中，搜到如下代码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">find_things_extern()&#123;</span><br><span class=\"line\">    thing=$1</span><br><span class=\"line\">    pattern=$2</span><br><span class=\"line\">    file=$source_path/$3</span><br><span class=\"line\">    out=$&#123;4:-$thing&#125;</span><br><span class=\"line\">    sed -n &quot;s/^[^#]*extern.*$pattern *ff_\\([^ ]*\\)_$thing;/\\1_$out/p&quot; &quot;$file&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">find_filters_extern()&#123;</span><br><span class=\"line\">    file=$source_path/$1</span><br><span class=\"line\">    sed -n &#x27;s/^extern AVFilter ff_[avfsinkrc]\\&#123;2,5\\&#125;_\\([[:alnum:]_]\\&#123;1,\\&#125;\\);/\\1_filter/p&#x27; $file</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FILTER_LIST=$(find_filters_extern libavfilter/allfilters.c)</span><br><span class=\"line\">OUTDEV_LIST=$(find_things_extern muxer AVOutputFormat libavdevice/alldevices.c outdev)</span><br><span class=\"line\">INDEV_LIST=$(find_things_extern demuxer AVInputFormat libavdevice/alldevices.c indev)</span><br><span class=\"line\">MUXER_LIST=$(find_things_extern muxer AVOutputFormat libavformat/allformats.c)</span><br><span class=\"line\">DEMUXER_LIST=$(find_things_extern demuxer AVInputFormat libavformat/allformats.c)</span><br><span class=\"line\">ENCODER_LIST=$(find_things_extern encoder AVCodec libavcodec/allcodecs.c)</span><br><span class=\"line\">DECODER_LIST=$(find_things_extern decoder AVCodec libavcodec/allcodecs.c)</span><br><span class=\"line\">CODEC_LIST=&quot;</span><br><span class=\"line\">    $ENCODER_LIST</span><br><span class=\"line\">    $DECODER_LIST</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> generate the lists of enabled components</span></span><br><span class=\"line\">print_enabled_components()&#123;</span><br><span class=\"line\">    file=$1</span><br><span class=\"line\">    struct_name=$2</span><br><span class=\"line\">    name=$3</span><br><span class=\"line\">    shift 3</span><br><span class=\"line\">    echo &quot;static const $struct_name * const $name[] = &#123;&quot; &gt; $TMPH</span><br><span class=\"line\">    for c in $*; do</span><br><span class=\"line\">        if enabled $c; then</span><br><span class=\"line\">            case $name in</span><br><span class=\"line\">                filter_list)</span><br><span class=\"line\">                    eval c=\\$full_filter_name_$&#123;c%_filter&#125;</span><br><span class=\"line\">                ;;</span><br><span class=\"line\">                indev_list)</span><br><span class=\"line\">                    c=$&#123;c%_indev&#125;_demuxer</span><br><span class=\"line\">                ;;</span><br><span class=\"line\">                outdev_list)</span><br><span class=\"line\">                    c=$&#123;c%_outdev&#125;_muxer</span><br><span class=\"line\">                ;;</span><br><span class=\"line\">            esac</span><br><span class=\"line\">            printf &quot;    &amp;ff_%s,\\n&quot; $c &gt;&gt; $TMPH</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    done</span><br><span class=\"line\">    if [ &quot;$name&quot; = &quot;filter_list&quot; ]; then</span><br><span class=\"line\">        for c in asrc_abuffer vsrc_buffer asink_abuffer vsink_buffer; do</span><br><span class=\"line\">            printf &quot;    &amp;ff_%s,\\n&quot; $c &gt;&gt; $TMPH</span><br><span class=\"line\">        done</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    echo &quot;    NULL &#125;;&quot; &gt;&gt; $TMPH</span><br><span class=\"line\">    cp_if_changed $TMPH $file</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">print_enabled_components libavfilter/filter_list.c AVFilter filter_list $FILTER_LIST</span><br><span class=\"line\">print_enabled_components libavcodec/codec_list.c AVCodec codec_list $CODEC_LIST</span><br><span class=\"line\">print_enabled_components libavcodec/parser_list.c AVCodecParser parser_list $PARSER_LIST</span><br><span class=\"line\">print_enabled_components libavcodec/bsf_list.c AVBitStreamFilter bitstream_filters $BSF_LIST</span><br><span class=\"line\">print_enabled_components libavformat/demuxer_list.c AVInputFormat demuxer_list $DEMUXER_LIST</span><br><span class=\"line\">print_enabled_components libavformat/muxer_list.c AVOutputFormat muxer_list $MUXER_LIST</span><br><span class=\"line\">print_enabled_components libavdevice/indev_list.c AVInputFormat indev_list $INDEV_LIST</span><br><span class=\"line\">print_enabled_components libavdevice/outdev_list.c AVOutputFormat outdev_list $OUTDEV_LIST</span><br><span class=\"line\">print_enabled_components libavformat/protocol_list.c URLProtocol url_protocols $PROTOCOL_LIST</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;看到以上代码，舒了一口气，codec_list.c终于找到了。正则表达式去查找libavcodec/allcodecs.c中声明的encoder和decoder，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_a64multi_encoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_a64multi5_encoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_aasc_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_aic_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_alias_pix_encoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_alias_pix_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_agm_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_amv_encoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_amv_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_anm_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_ansi_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_apng_encoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_apng_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_arbc_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_argo_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_asv1_encoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_asv1_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_asv2_encoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_asv2_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_aura_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_aura2_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_avrp_encoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_avrp_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_avrn_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_avs_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_avui_encoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_avui_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_ayuv_encoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_ayuv_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_bethsoftvid_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_bfi_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_bink_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_bitpacked_decoder;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> AVCodec ff_bmp_encoder;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<hr>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;题外话插一句：对我而言，开源项目认真看了的项目是tensorflow lite，MACE和MNN，最近才开始认真阅读ffmpeg的源码，但给我带来的冲击远比其他开源项目大，感慨c原来也可以这么玩。</p>\n"},{"title":"ffmpeg结构体分析之AVCodec","date":"2020-11-09T23:23:09.000Z","_content":"&nbsp;&nbsp;&nbsp;&nbsp;(在开始之前，说几句题外话。本来自己的flag是vlc代码分析，加上工作上也在ijkplayer中分析快手的LAS。看下对于播放器而言，对于软解，基本都是直接在ffmpeg基础上套了一层，所以自己还是来翻翻ffmpeg，先熟悉ffmpeg的源码。我下载版本为4.3.1的ffmpeg的源码)\n&nbsp;&nbsp;&nbsp;&nbsp;AVCodec是视(音)频编解码器对应的一个结构体，存储编解码器的相关信息，定义在libavcodec/codec.h文件中。先把源码贴出来：\n```c\ntypedef struct AVCodec {\n    /**\n     * Name of the codec implementation.\n     * The name is globally unique among encoders and among decoders (but an\n     * encoder and a decoder can share the same name).\n     * This is the primary way to find a codec from the user perspective.\n     */\n    const char *name;\n    /**\n     * Descriptive name for the codec, meant to be more human readable than name.\n     * You should use the NULL_IF_CONFIG_SMALL() macro to define it.\n     */\n    const char *long_name;\n    enum AVMediaType type;\n    enum AVCodecID id;\n    /**\n     * Codec capabilities.\n     * see AV_CODEC_CAP_*\n     */\n    int capabilities;\n    const AVRational *supported_framerates; ///< array of supported framerates, or NULL if any, array is terminated by {0,0}\n    const enum AVPixelFormat *pix_fmts;     ///< array of supported pixel formats, or NULL if unknown, array is terminated by -1\n    const int *supported_samplerates;       ///< array of supported audio samplerates, or NULL if unknown, array is terminated by 0\n    const enum AVSampleFormat *sample_fmts; ///< array of supported sample formats, or NULL if unknown, array is terminated by -1\n    const uint64_t *channel_layouts;         ///< array of support channel layouts, or NULL if unknown. array is terminated by 0\n    uint8_t max_lowres;                     ///< maximum value for lowres supported by the decoder\n    const AVClass *priv_class;              ///< AVClass for the private context\n    const AVProfile *profiles;              ///< array of recognized profiles, or NULL if unknown, array is terminated by {FF_PROFILE_UNKNOWN}\n\n    /**\n     * Group name of the codec implementation.\n     * This is a short symbolic name of the wrapper backing this codec. A\n     * wrapper uses some kind of external implementation for the codec, such\n     * as an external library, or a codec implementation provided by the OS or\n     * the hardware.\n     * If this field is NULL, this is a builtin, libavcodec native codec.\n     * If non-NULL, this will be the suffix in AVCodec.name in most cases\n     * (usually AVCodec.name will be of the form \"<codec_name>_<wrapper_name>\").\n     */\n    const char *wrapper_name;\n\n    /*****************************************************************\n     * No fields below this line are part of the public API. They\n     * may not be used outside of libavcodec and can be changed and\n     * removed at will.\n     * New public fields should be added right above.\n     *****************************************************************\n     */\n    int priv_data_size;\n    struct AVCodec *next;\n    /**\n     * @name Frame-level threading support functions\n     * @{\n     */\n    /**\n     * Copy necessary context variables from a previous thread context to the current one.\n     * If not defined, the next thread will start automatically; otherwise, the codec\n     * must call ff_thread_finish_setup().\n     *\n     * dst and src will (rarely) point to the same context, in which case memcpy should be skipped.\n     */\n    int (*update_thread_context)(struct AVCodecContext *dst, const struct AVCodecContext *src);\n    /** @} */\n\n    /**\n     * Private codec-specific defaults.\n     */\n    const AVCodecDefault *defaults;\n\n    /**\n     * Initialize codec static data, called from avcodec_register().\n     *\n     * This is not intended for time consuming operations as it is\n     * run for every codec regardless of that codec being used.\n     */\n    void (*init_static_data)(struct AVCodec *codec);\n\n    int (*init)(struct AVCodecContext *);\n    int (*encode_sub)(struct AVCodecContext *, uint8_t *buf, int buf_size,\n                      const struct AVSubtitle *sub);\n    /**\n     * Encode data to an AVPacket.\n     *\n     * @param      avctx          codec context\n     * @param      avpkt          output AVPacket (may contain a user-provided buffer)\n     * @param[in]  frame          AVFrame containing the raw data to be encoded\n     * @param[out] got_packet_ptr encoder sets to 0 or 1 to indicate that a\n     *                            non-empty packet was returned in avpkt.\n     * @return 0 on success, negative error code on failure\n     */\n    int (*encode2)(struct AVCodecContext *avctx, struct AVPacket *avpkt,\n                   const struct AVFrame *frame, int *got_packet_ptr);\n    int (*decode)(struct AVCodecContext *, void *outdata, int *outdata_size, struct AVPacket *avpkt);\n    int (*close)(struct AVCodecContext *);\n    /**\n     * Encode API with decoupled packet/frame dataflow. The API is the\n     * same as the avcodec_ prefixed APIs (avcodec_send_frame() etc.), except\n     * that:\n     * - never called if the codec is closed or the wrong type,\n     * - if AV_CODEC_CAP_DELAY is not set, drain frames are never sent,\n     * - only one drain frame is ever passed down,\n     */\n    int (*send_frame)(struct AVCodecContext *avctx, const struct AVFrame *frame);\n    int (*receive_packet)(struct AVCodecContext *avctx, struct AVPacket *avpkt);\n\n    /**\n     * Decode API with decoupled packet/frame dataflow. This function is called\n     * to get one output frame. It should call ff_decode_get_packet() to obtain\n     * input data.\n     */\n    int (*receive_frame)(struct AVCodecContext *avctx, struct AVFrame *frame);\n    /**\n     * Flush buffers.\n     * Will be called when seeking\n     */\n    void (*flush)(struct AVCodecContext *);\n    /**\n     * Internal codec capabilities.\n     * See FF_CODEC_CAP_* in internal.h\n     */\n    int caps_internal;\n\n    /**\n     * Decoding only, a comma-separated list of bitstream filters to apply to\n     * packets before decoding.\n     */\n    const char *bsfs;\n\n    /**\n     * Array of pointers to hardware configurations supported by the codec,\n     * or NULL if no hardware supported.  The array is terminated by a NULL\n     * pointer.\n     *\n     * The user can only access this field via avcodec_get_hw_config().\n     */\n    const struct AVCodecHWConfigInternal **hw_configs;\n\n    /**\n     * List of supported codec_tags, terminated by FF_CODEC_TAGS_END.\n     */\n    const uint32_t *codec_tags;\n}AVCodec;\n```\n现在逐个来说明下结构体中的变量    \n1. **const char *name** ：编解码器的名字，比较短    \n2. **const char *long_name** :编解码器的名字，全称    \n3. **enum AVMediaType type** :媒体类型,视频、音频、字幕等  \n```c\n   enum AVMediaType {\n    AVMEDIA_TYPE_UNKNOWN = -1,  ///< Usually treated as AVMEDIA_TYPE_DATA\n    AVMEDIA_TYPE_VIDEO,\n    AVMEDIA_TYPE_AUDIO,\n    AVMEDIA_TYPE_DATA,          ///< Opaque data information usually continuous\n    AVMEDIA_TYPE_SUBTITLE,\n    AVMEDIA_TYPE_ATTACHMENT,    ///< Opaque data information usually sparse\n    AVMEDIA_TYPE_NB\n};\n```\n4. **enum AVCodecID id** ：编解码器ID，定义太多，例如AV_CODEC_ID_HEVC、AV_CODEC_ID_H264、AV_CODEC_ID_VP8…… ffmpeg太强大了，支持的编解码器太多太多了。\n5. **int capabilities** :编解码器的能力，例如：H264: CODEC_CAP_DR1|CODEC_CAP_DELAY|CODEC_CAP_SLICE_THREADS|CODEC_CAP_FRAME_THREADS\n6. **const AVRational *supported_framerates** ：支持的帧率，例如25帧的话，(AVRational){1, 25}\n7. **const enum AVPixelFormat *pix_fmts** ：针对视频而言，编解码器支持的数据格式，例如AV_PIX_FMT_YUV420P、AV_PIX_FMT_YUV422P、AV_PIX_FMT_RGB24……格式也是有很多多种\n8. **const int *supported_samplerates** ：音频而言，编解码器支持的采样率\n9. **const enum AVSampleFormat *sample_fmts** ：音频而言，编解码器支持的采样格式，例如：AV_SAMPLE_FMT_U8、AV_SAMPLE_FMT_S16、AV_SAMPLE_FMT_S16P……\n10. **const uint64_t *channel_layouts** ：编解码器支持的声道数\n11. **uint8_t max_lowres** ：解码器支持低分辨率的最大值\n12. **const AVClass *priv_class** ：AVClass针对私有上下文，以后再来扒AVClass，暂时先跳过\n13. **const AVProfile *profiles** ：公认的配置文件数组,如果未知则为NULL,数组由FF_PROFILE_UNKNOWN表示终止\n14. **const char *wrapper_name** ：编解码器实现的组名\n15. **int priv_data_size** ：私有数据总长度\n16. **struct AVCodec *next** ：下一个链接对象","source":"_posts/ffmpeg结构体分析之AVCodec.md","raw":"---\ntitle: ffmpeg结构体分析之AVCodec\ndate: 2020-11-09 23:23:09\ntags:\n---\n&nbsp;&nbsp;&nbsp;&nbsp;(在开始之前，说几句题外话。本来自己的flag是vlc代码分析，加上工作上也在ijkplayer中分析快手的LAS。看下对于播放器而言，对于软解，基本都是直接在ffmpeg基础上套了一层，所以自己还是来翻翻ffmpeg，先熟悉ffmpeg的源码。我下载版本为4.3.1的ffmpeg的源码)\n&nbsp;&nbsp;&nbsp;&nbsp;AVCodec是视(音)频编解码器对应的一个结构体，存储编解码器的相关信息，定义在libavcodec/codec.h文件中。先把源码贴出来：\n```c\ntypedef struct AVCodec {\n    /**\n     * Name of the codec implementation.\n     * The name is globally unique among encoders and among decoders (but an\n     * encoder and a decoder can share the same name).\n     * This is the primary way to find a codec from the user perspective.\n     */\n    const char *name;\n    /**\n     * Descriptive name for the codec, meant to be more human readable than name.\n     * You should use the NULL_IF_CONFIG_SMALL() macro to define it.\n     */\n    const char *long_name;\n    enum AVMediaType type;\n    enum AVCodecID id;\n    /**\n     * Codec capabilities.\n     * see AV_CODEC_CAP_*\n     */\n    int capabilities;\n    const AVRational *supported_framerates; ///< array of supported framerates, or NULL if any, array is terminated by {0,0}\n    const enum AVPixelFormat *pix_fmts;     ///< array of supported pixel formats, or NULL if unknown, array is terminated by -1\n    const int *supported_samplerates;       ///< array of supported audio samplerates, or NULL if unknown, array is terminated by 0\n    const enum AVSampleFormat *sample_fmts; ///< array of supported sample formats, or NULL if unknown, array is terminated by -1\n    const uint64_t *channel_layouts;         ///< array of support channel layouts, or NULL if unknown. array is terminated by 0\n    uint8_t max_lowres;                     ///< maximum value for lowres supported by the decoder\n    const AVClass *priv_class;              ///< AVClass for the private context\n    const AVProfile *profiles;              ///< array of recognized profiles, or NULL if unknown, array is terminated by {FF_PROFILE_UNKNOWN}\n\n    /**\n     * Group name of the codec implementation.\n     * This is a short symbolic name of the wrapper backing this codec. A\n     * wrapper uses some kind of external implementation for the codec, such\n     * as an external library, or a codec implementation provided by the OS or\n     * the hardware.\n     * If this field is NULL, this is a builtin, libavcodec native codec.\n     * If non-NULL, this will be the suffix in AVCodec.name in most cases\n     * (usually AVCodec.name will be of the form \"<codec_name>_<wrapper_name>\").\n     */\n    const char *wrapper_name;\n\n    /*****************************************************************\n     * No fields below this line are part of the public API. They\n     * may not be used outside of libavcodec and can be changed and\n     * removed at will.\n     * New public fields should be added right above.\n     *****************************************************************\n     */\n    int priv_data_size;\n    struct AVCodec *next;\n    /**\n     * @name Frame-level threading support functions\n     * @{\n     */\n    /**\n     * Copy necessary context variables from a previous thread context to the current one.\n     * If not defined, the next thread will start automatically; otherwise, the codec\n     * must call ff_thread_finish_setup().\n     *\n     * dst and src will (rarely) point to the same context, in which case memcpy should be skipped.\n     */\n    int (*update_thread_context)(struct AVCodecContext *dst, const struct AVCodecContext *src);\n    /** @} */\n\n    /**\n     * Private codec-specific defaults.\n     */\n    const AVCodecDefault *defaults;\n\n    /**\n     * Initialize codec static data, called from avcodec_register().\n     *\n     * This is not intended for time consuming operations as it is\n     * run for every codec regardless of that codec being used.\n     */\n    void (*init_static_data)(struct AVCodec *codec);\n\n    int (*init)(struct AVCodecContext *);\n    int (*encode_sub)(struct AVCodecContext *, uint8_t *buf, int buf_size,\n                      const struct AVSubtitle *sub);\n    /**\n     * Encode data to an AVPacket.\n     *\n     * @param      avctx          codec context\n     * @param      avpkt          output AVPacket (may contain a user-provided buffer)\n     * @param[in]  frame          AVFrame containing the raw data to be encoded\n     * @param[out] got_packet_ptr encoder sets to 0 or 1 to indicate that a\n     *                            non-empty packet was returned in avpkt.\n     * @return 0 on success, negative error code on failure\n     */\n    int (*encode2)(struct AVCodecContext *avctx, struct AVPacket *avpkt,\n                   const struct AVFrame *frame, int *got_packet_ptr);\n    int (*decode)(struct AVCodecContext *, void *outdata, int *outdata_size, struct AVPacket *avpkt);\n    int (*close)(struct AVCodecContext *);\n    /**\n     * Encode API with decoupled packet/frame dataflow. The API is the\n     * same as the avcodec_ prefixed APIs (avcodec_send_frame() etc.), except\n     * that:\n     * - never called if the codec is closed or the wrong type,\n     * - if AV_CODEC_CAP_DELAY is not set, drain frames are never sent,\n     * - only one drain frame is ever passed down,\n     */\n    int (*send_frame)(struct AVCodecContext *avctx, const struct AVFrame *frame);\n    int (*receive_packet)(struct AVCodecContext *avctx, struct AVPacket *avpkt);\n\n    /**\n     * Decode API with decoupled packet/frame dataflow. This function is called\n     * to get one output frame. It should call ff_decode_get_packet() to obtain\n     * input data.\n     */\n    int (*receive_frame)(struct AVCodecContext *avctx, struct AVFrame *frame);\n    /**\n     * Flush buffers.\n     * Will be called when seeking\n     */\n    void (*flush)(struct AVCodecContext *);\n    /**\n     * Internal codec capabilities.\n     * See FF_CODEC_CAP_* in internal.h\n     */\n    int caps_internal;\n\n    /**\n     * Decoding only, a comma-separated list of bitstream filters to apply to\n     * packets before decoding.\n     */\n    const char *bsfs;\n\n    /**\n     * Array of pointers to hardware configurations supported by the codec,\n     * or NULL if no hardware supported.  The array is terminated by a NULL\n     * pointer.\n     *\n     * The user can only access this field via avcodec_get_hw_config().\n     */\n    const struct AVCodecHWConfigInternal **hw_configs;\n\n    /**\n     * List of supported codec_tags, terminated by FF_CODEC_TAGS_END.\n     */\n    const uint32_t *codec_tags;\n}AVCodec;\n```\n现在逐个来说明下结构体中的变量    \n1. **const char *name** ：编解码器的名字，比较短    \n2. **const char *long_name** :编解码器的名字，全称    \n3. **enum AVMediaType type** :媒体类型,视频、音频、字幕等  \n```c\n   enum AVMediaType {\n    AVMEDIA_TYPE_UNKNOWN = -1,  ///< Usually treated as AVMEDIA_TYPE_DATA\n    AVMEDIA_TYPE_VIDEO,\n    AVMEDIA_TYPE_AUDIO,\n    AVMEDIA_TYPE_DATA,          ///< Opaque data information usually continuous\n    AVMEDIA_TYPE_SUBTITLE,\n    AVMEDIA_TYPE_ATTACHMENT,    ///< Opaque data information usually sparse\n    AVMEDIA_TYPE_NB\n};\n```\n4. **enum AVCodecID id** ：编解码器ID，定义太多，例如AV_CODEC_ID_HEVC、AV_CODEC_ID_H264、AV_CODEC_ID_VP8…… ffmpeg太强大了，支持的编解码器太多太多了。\n5. **int capabilities** :编解码器的能力，例如：H264: CODEC_CAP_DR1|CODEC_CAP_DELAY|CODEC_CAP_SLICE_THREADS|CODEC_CAP_FRAME_THREADS\n6. **const AVRational *supported_framerates** ：支持的帧率，例如25帧的话，(AVRational){1, 25}\n7. **const enum AVPixelFormat *pix_fmts** ：针对视频而言，编解码器支持的数据格式，例如AV_PIX_FMT_YUV420P、AV_PIX_FMT_YUV422P、AV_PIX_FMT_RGB24……格式也是有很多多种\n8. **const int *supported_samplerates** ：音频而言，编解码器支持的采样率\n9. **const enum AVSampleFormat *sample_fmts** ：音频而言，编解码器支持的采样格式，例如：AV_SAMPLE_FMT_U8、AV_SAMPLE_FMT_S16、AV_SAMPLE_FMT_S16P……\n10. **const uint64_t *channel_layouts** ：编解码器支持的声道数\n11. **uint8_t max_lowres** ：解码器支持低分辨率的最大值\n12. **const AVClass *priv_class** ：AVClass针对私有上下文，以后再来扒AVClass，暂时先跳过\n13. **const AVProfile *profiles** ：公认的配置文件数组,如果未知则为NULL,数组由FF_PROFILE_UNKNOWN表示终止\n14. **const char *wrapper_name** ：编解码器实现的组名\n15. **int priv_data_size** ：私有数据总长度\n16. **struct AVCodec *next** ：下一个链接对象","slug":"ffmpeg结构体分析之AVCodec","published":1,"updated":"2020-11-09T16:20:17.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhez9tjh0001bvhi9d734mux","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;(在开始之前，说几句题外话。本来自己的flag是vlc代码分析，加上工作上也在ijkplayer中分析快手的LAS。看下对于播放器而言，对于软解，基本都是直接在ffmpeg基础上套了一层，所以自己还是来翻翻ffmpeg，先熟悉ffmpeg的源码。我下载版本为4.3.1的ffmpeg的源码)<br>&nbsp;&nbsp;&nbsp;&nbsp;AVCodec是视(音)频编解码器对应的一个结构体，存储编解码器的相关信息，定义在libavcodec/codec.h文件中。先把源码贴出来：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AVCodec</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Name of the codec implementation.</span></span><br><span class=\"line\"><span class=\"comment\">     * The name is globally unique among encoders and among decoders (but an</span></span><br><span class=\"line\"><span class=\"comment\">     * encoder and a decoder can share the same name).</span></span><br><span class=\"line\"><span class=\"comment\">     * This is the primary way to find a codec from the user perspective.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Descriptive name for the codec, meant to be more human readable than name.</span></span><br><span class=\"line\"><span class=\"comment\">     * You should use the NULL_IF_CONFIG_SMALL() macro to define it.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *long_name;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">AVMediaType</span> <span class=\"title\">type</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">AVCodecID</span> <span class=\"title\">id</span>;</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Codec capabilities.</span></span><br><span class=\"line\"><span class=\"comment\">     * see AV_CODEC_CAP_*</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> capabilities;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> AVRational *supported_framerates; <span class=\"comment\">///&lt; array of supported framerates, or NULL if any, array is terminated by &#123;0,0&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">AVPixelFormat</span> *<span class=\"title\">pix_fmts</span>;</span>     <span class=\"comment\">///&lt; array of supported pixel formats, or NULL if unknown, array is terminated by -1</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> *supported_samplerates;       <span class=\"comment\">///&lt; array of supported audio samplerates, or NULL if unknown, array is terminated by 0</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">AVSampleFormat</span> *<span class=\"title\">sample_fmts</span>;</span> <span class=\"comment\">///&lt; array of supported sample formats, or NULL if unknown, array is terminated by -1</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">uint64_t</span> *channel_layouts;         <span class=\"comment\">///&lt; array of support channel layouts, or NULL if unknown. array is terminated by 0</span></span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> max_lowres;                     <span class=\"comment\">///&lt; maximum value for lowres supported by the decoder</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> AVClass *priv_class;              <span class=\"comment\">///&lt; AVClass for the private context</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> AVProfile *profiles;              <span class=\"comment\">///&lt; array of recognized profiles, or NULL if unknown, array is terminated by &#123;FF_PROFILE_UNKNOWN&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Group name of the codec implementation.</span></span><br><span class=\"line\"><span class=\"comment\">     * This is a short symbolic name of the wrapper backing this codec. A</span></span><br><span class=\"line\"><span class=\"comment\">     * wrapper uses some kind of external implementation for the codec, such</span></span><br><span class=\"line\"><span class=\"comment\">     * as an external library, or a codec implementation provided by the OS or</span></span><br><span class=\"line\"><span class=\"comment\">     * the hardware.</span></span><br><span class=\"line\"><span class=\"comment\">     * If this field is NULL, this is a builtin, libavcodec native codec.</span></span><br><span class=\"line\"><span class=\"comment\">     * If non-NULL, this will be the suffix in AVCodec.name in most cases</span></span><br><span class=\"line\"><span class=\"comment\">     * (usually AVCodec.name will be of the form &quot;&lt;codec_name&gt;_&lt;wrapper_name&gt;&quot;).</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *wrapper_name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*****************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">     * No fields below this line are part of the public API. They</span></span><br><span class=\"line\"><span class=\"comment\">     * may not be used outside of libavcodec and can be changed and</span></span><br><span class=\"line\"><span class=\"comment\">     * removed at will.</span></span><br><span class=\"line\"><span class=\"comment\">     * New public fields should be added right above.</span></span><br><span class=\"line\"><span class=\"comment\">     *****************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> priv_data_size;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AVCodec</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @name Frame-level threading support functions</span></span><br><span class=\"line\"><span class=\"comment\">     * @&#123;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Copy necessary context variables from a previous thread context to the current one.</span></span><br><span class=\"line\"><span class=\"comment\">     * If not defined, the next thread will start automatically; otherwise, the codec</span></span><br><span class=\"line\"><span class=\"comment\">     * must call ff_thread_finish_setup().</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * dst and src will (rarely) point to the same context, in which case memcpy should be skipped.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*update_thread_context)(struct AVCodecContext *dst, <span class=\"keyword\">const</span> struct AVCodecContext *src);</span><br><span class=\"line\">    <span class=\"comment\">/** @&#125; */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Private codec-specific defaults.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> AVCodecDefault *defaults;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Initialize codec static data, called from avcodec_register().</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * This is not intended for time consuming operations as it is</span></span><br><span class=\"line\"><span class=\"comment\">     * run for every codec regardless of that codec being used.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*init_static_data)(struct AVCodec *codec);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*init)(struct AVCodecContext *);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*encode_sub)(struct AVCodecContext *, <span class=\"keyword\">uint8_t</span> *buf, <span class=\"keyword\">int</span> buf_size,</span><br><span class=\"line\">                      <span class=\"keyword\">const</span> struct AVSubtitle *sub);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Encode data to an AVPacket.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @param      avctx          codec context</span></span><br><span class=\"line\"><span class=\"comment\">     * @param      avpkt          output AVPacket (may contain a user-provided buffer)</span></span><br><span class=\"line\"><span class=\"comment\">     * @param[in]  frame          AVFrame containing the raw data to be encoded</span></span><br><span class=\"line\"><span class=\"comment\">     * @param[out] got_packet_ptr encoder sets to 0 or 1 to indicate that a</span></span><br><span class=\"line\"><span class=\"comment\">     *                            non-empty packet was returned in avpkt.</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 0 on success, negative error code on failure</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*encode2)(struct AVCodecContext *avctx, struct AVPacket *avpkt,</span><br><span class=\"line\">                   <span class=\"keyword\">const</span> struct AVFrame *frame, <span class=\"keyword\">int</span> *got_packet_ptr);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*decode)(struct AVCodecContext *, <span class=\"keyword\">void</span> *outdata, <span class=\"keyword\">int</span> *outdata_size, struct AVPacket *avpkt);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*close)(struct AVCodecContext *);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Encode API with decoupled packet/frame dataflow. The API is the</span></span><br><span class=\"line\"><span class=\"comment\">     * same as the avcodec_ prefixed APIs (avcodec_send_frame() etc.), except</span></span><br><span class=\"line\"><span class=\"comment\">     * that:</span></span><br><span class=\"line\"><span class=\"comment\">     * - never called if the codec is closed or the wrong type,</span></span><br><span class=\"line\"><span class=\"comment\">     * - if AV_CODEC_CAP_DELAY is not set, drain frames are never sent,</span></span><br><span class=\"line\"><span class=\"comment\">     * - only one drain frame is ever passed down,</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*send_frame)(struct AVCodecContext *avctx, <span class=\"keyword\">const</span> struct AVFrame *frame);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*receive_packet)(struct AVCodecContext *avctx, struct AVPacket *avpkt);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Decode API with decoupled packet/frame dataflow. This function is called</span></span><br><span class=\"line\"><span class=\"comment\">     * to get one output frame. It should call ff_decode_get_packet() to obtain</span></span><br><span class=\"line\"><span class=\"comment\">     * input data.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*receive_frame)(struct AVCodecContext *avctx, struct AVFrame *frame);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Flush buffers.</span></span><br><span class=\"line\"><span class=\"comment\">     * Will be called when seeking</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*flush)(struct AVCodecContext *);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Internal codec capabilities.</span></span><br><span class=\"line\"><span class=\"comment\">     * See FF_CODEC_CAP_* in internal.h</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> caps_internal;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Decoding only, a comma-separated list of bitstream filters to apply to</span></span><br><span class=\"line\"><span class=\"comment\">     * packets before decoding.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *bsfs;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Array of pointers to hardware configurations supported by the codec,</span></span><br><span class=\"line\"><span class=\"comment\">     * or NULL if no hardware supported.  The array is terminated by a NULL</span></span><br><span class=\"line\"><span class=\"comment\">     * pointer.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * The user can only access this field via avcodec_get_hw_config().</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AVCodecHWConfigInternal</span> **<span class=\"title\">hw_configs</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * List of supported codec_tags, terminated by FF_CODEC_TAGS_END.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> *codec_tags;</span><br><span class=\"line\">&#125;AVCodec;</span><br></pre></td></tr></table></figure>\n<p>现在逐个来说明下结构体中的变量    </p>\n<ol>\n<li>*<em>const char <em>name</em></em> ：编解码器的名字，比较短    </li>\n<li>*<em>const char <em>long_name</em></em> :编解码器的名字，全称    </li>\n<li><strong>enum AVMediaType type</strong> :媒体类型,视频、音频、字幕等  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">AVMediaType</span> &#123;</span></span><br><span class=\"line\">    AVMEDIA_TYPE_UNKNOWN = <span class=\"number\">-1</span>,  <span class=\"comment\">///&lt; Usually treated as AVMEDIA_TYPE_DATA</span></span><br><span class=\"line\">    AVMEDIA_TYPE_VIDEO,</span><br><span class=\"line\">    AVMEDIA_TYPE_AUDIO,</span><br><span class=\"line\">    AVMEDIA_TYPE_DATA,          <span class=\"comment\">///&lt; Opaque data information usually continuous</span></span><br><span class=\"line\">    AVMEDIA_TYPE_SUBTITLE,</span><br><span class=\"line\">    AVMEDIA_TYPE_ATTACHMENT,    <span class=\"comment\">///&lt; Opaque data information usually sparse</span></span><br><span class=\"line\">    AVMEDIA_TYPE_NB</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li><strong>enum AVCodecID id</strong> ：编解码器ID，定义太多，例如AV_CODEC_ID_HEVC、AV_CODEC_ID_H264、AV_CODEC_ID_VP8…… ffmpeg太强大了，支持的编解码器太多太多了。</li>\n<li><strong>int capabilities</strong> :编解码器的能力，例如：H264: CODEC_CAP_DR1|CODEC_CAP_DELAY|CODEC_CAP_SLICE_THREADS|CODEC_CAP_FRAME_THREADS</li>\n<li>*<em>const AVRational <em>supported_framerates</em></em> ：支持的帧率，例如25帧的话，(AVRational){1, 25}</li>\n<li>*<em>const enum AVPixelFormat <em>pix_fmts</em></em> ：针对视频而言，编解码器支持的数据格式，例如AV_PIX_FMT_YUV420P、AV_PIX_FMT_YUV422P、AV_PIX_FMT_RGB24……格式也是有很多多种</li>\n<li>*<em>const int <em>supported_samplerates</em></em> ：音频而言，编解码器支持的采样率</li>\n<li>*<em>const enum AVSampleFormat <em>sample_fmts</em></em> ：音频而言，编解码器支持的采样格式，例如：AV_SAMPLE_FMT_U8、AV_SAMPLE_FMT_S16、AV_SAMPLE_FMT_S16P……</li>\n<li>*<em>const uint64_t <em>channel_layouts</em></em> ：编解码器支持的声道数</li>\n<li><strong>uint8_t max_lowres</strong> ：解码器支持低分辨率的最大值</li>\n<li>*<em>const AVClass <em>priv_class</em></em> ：AVClass针对私有上下文，以后再来扒AVClass，暂时先跳过</li>\n<li>*<em>const AVProfile <em>profiles</em></em> ：公认的配置文件数组,如果未知则为NULL,数组由FF_PROFILE_UNKNOWN表示终止</li>\n<li>*<em>const char <em>wrapper_name</em></em> ：编解码器实现的组名</li>\n<li><strong>int priv_data_size</strong> ：私有数据总长度</li>\n<li>*<em>struct AVCodec <em>next</em></em> ：下一个链接对象</li>\n</ol>\n","site":{"data":{}},"length":6409,"excerpt":"","more":"<p>&nbsp;&nbsp;&nbsp;&nbsp;(在开始之前，说几句题外话。本来自己的flag是vlc代码分析，加上工作上也在ijkplayer中分析快手的LAS。看下对于播放器而言，对于软解，基本都是直接在ffmpeg基础上套了一层，所以自己还是来翻翻ffmpeg，先熟悉ffmpeg的源码。我下载版本为4.3.1的ffmpeg的源码)<br>&nbsp;&nbsp;&nbsp;&nbsp;AVCodec是视(音)频编解码器对应的一个结构体，存储编解码器的相关信息，定义在libavcodec/codec.h文件中。先把源码贴出来：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AVCodec</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Name of the codec implementation.</span></span><br><span class=\"line\"><span class=\"comment\">     * The name is globally unique among encoders and among decoders (but an</span></span><br><span class=\"line\"><span class=\"comment\">     * encoder and a decoder can share the same name).</span></span><br><span class=\"line\"><span class=\"comment\">     * This is the primary way to find a codec from the user perspective.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Descriptive name for the codec, meant to be more human readable than name.</span></span><br><span class=\"line\"><span class=\"comment\">     * You should use the NULL_IF_CONFIG_SMALL() macro to define it.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *long_name;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">AVMediaType</span> <span class=\"title\">type</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">AVCodecID</span> <span class=\"title\">id</span>;</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Codec capabilities.</span></span><br><span class=\"line\"><span class=\"comment\">     * see AV_CODEC_CAP_*</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> capabilities;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> AVRational *supported_framerates; <span class=\"comment\">///&lt; array of supported framerates, or NULL if any, array is terminated by &#123;0,0&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">AVPixelFormat</span> *<span class=\"title\">pix_fmts</span>;</span>     <span class=\"comment\">///&lt; array of supported pixel formats, or NULL if unknown, array is terminated by -1</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> *supported_samplerates;       <span class=\"comment\">///&lt; array of supported audio samplerates, or NULL if unknown, array is terminated by 0</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">AVSampleFormat</span> *<span class=\"title\">sample_fmts</span>;</span> <span class=\"comment\">///&lt; array of supported sample formats, or NULL if unknown, array is terminated by -1</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">uint64_t</span> *channel_layouts;         <span class=\"comment\">///&lt; array of support channel layouts, or NULL if unknown. array is terminated by 0</span></span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> max_lowres;                     <span class=\"comment\">///&lt; maximum value for lowres supported by the decoder</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> AVClass *priv_class;              <span class=\"comment\">///&lt; AVClass for the private context</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> AVProfile *profiles;              <span class=\"comment\">///&lt; array of recognized profiles, or NULL if unknown, array is terminated by &#123;FF_PROFILE_UNKNOWN&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Group name of the codec implementation.</span></span><br><span class=\"line\"><span class=\"comment\">     * This is a short symbolic name of the wrapper backing this codec. A</span></span><br><span class=\"line\"><span class=\"comment\">     * wrapper uses some kind of external implementation for the codec, such</span></span><br><span class=\"line\"><span class=\"comment\">     * as an external library, or a codec implementation provided by the OS or</span></span><br><span class=\"line\"><span class=\"comment\">     * the hardware.</span></span><br><span class=\"line\"><span class=\"comment\">     * If this field is NULL, this is a builtin, libavcodec native codec.</span></span><br><span class=\"line\"><span class=\"comment\">     * If non-NULL, this will be the suffix in AVCodec.name in most cases</span></span><br><span class=\"line\"><span class=\"comment\">     * (usually AVCodec.name will be of the form &quot;&lt;codec_name&gt;_&lt;wrapper_name&gt;&quot;).</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *wrapper_name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*****************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">     * No fields below this line are part of the public API. They</span></span><br><span class=\"line\"><span class=\"comment\">     * may not be used outside of libavcodec and can be changed and</span></span><br><span class=\"line\"><span class=\"comment\">     * removed at will.</span></span><br><span class=\"line\"><span class=\"comment\">     * New public fields should be added right above.</span></span><br><span class=\"line\"><span class=\"comment\">     *****************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> priv_data_size;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AVCodec</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @name Frame-level threading support functions</span></span><br><span class=\"line\"><span class=\"comment\">     * @&#123;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Copy necessary context variables from a previous thread context to the current one.</span></span><br><span class=\"line\"><span class=\"comment\">     * If not defined, the next thread will start automatically; otherwise, the codec</span></span><br><span class=\"line\"><span class=\"comment\">     * must call ff_thread_finish_setup().</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * dst and src will (rarely) point to the same context, in which case memcpy should be skipped.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*update_thread_context)(struct AVCodecContext *dst, <span class=\"keyword\">const</span> struct AVCodecContext *src);</span><br><span class=\"line\">    <span class=\"comment\">/** @&#125; */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Private codec-specific defaults.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> AVCodecDefault *defaults;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Initialize codec static data, called from avcodec_register().</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * This is not intended for time consuming operations as it is</span></span><br><span class=\"line\"><span class=\"comment\">     * run for every codec regardless of that codec being used.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*init_static_data)(struct AVCodec *codec);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*init)(struct AVCodecContext *);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*encode_sub)(struct AVCodecContext *, <span class=\"keyword\">uint8_t</span> *buf, <span class=\"keyword\">int</span> buf_size,</span><br><span class=\"line\">                      <span class=\"keyword\">const</span> struct AVSubtitle *sub);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Encode data to an AVPacket.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @param      avctx          codec context</span></span><br><span class=\"line\"><span class=\"comment\">     * @param      avpkt          output AVPacket (may contain a user-provided buffer)</span></span><br><span class=\"line\"><span class=\"comment\">     * @param[in]  frame          AVFrame containing the raw data to be encoded</span></span><br><span class=\"line\"><span class=\"comment\">     * @param[out] got_packet_ptr encoder sets to 0 or 1 to indicate that a</span></span><br><span class=\"line\"><span class=\"comment\">     *                            non-empty packet was returned in avpkt.</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 0 on success, negative error code on failure</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*encode2)(struct AVCodecContext *avctx, struct AVPacket *avpkt,</span><br><span class=\"line\">                   <span class=\"keyword\">const</span> struct AVFrame *frame, <span class=\"keyword\">int</span> *got_packet_ptr);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*decode)(struct AVCodecContext *, <span class=\"keyword\">void</span> *outdata, <span class=\"keyword\">int</span> *outdata_size, struct AVPacket *avpkt);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*close)(struct AVCodecContext *);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Encode API with decoupled packet/frame dataflow. The API is the</span></span><br><span class=\"line\"><span class=\"comment\">     * same as the avcodec_ prefixed APIs (avcodec_send_frame() etc.), except</span></span><br><span class=\"line\"><span class=\"comment\">     * that:</span></span><br><span class=\"line\"><span class=\"comment\">     * - never called if the codec is closed or the wrong type,</span></span><br><span class=\"line\"><span class=\"comment\">     * - if AV_CODEC_CAP_DELAY is not set, drain frames are never sent,</span></span><br><span class=\"line\"><span class=\"comment\">     * - only one drain frame is ever passed down,</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*send_frame)(struct AVCodecContext *avctx, <span class=\"keyword\">const</span> struct AVFrame *frame);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*receive_packet)(struct AVCodecContext *avctx, struct AVPacket *avpkt);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Decode API with decoupled packet/frame dataflow. This function is called</span></span><br><span class=\"line\"><span class=\"comment\">     * to get one output frame. It should call ff_decode_get_packet() to obtain</span></span><br><span class=\"line\"><span class=\"comment\">     * input data.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*receive_frame)(struct AVCodecContext *avctx, struct AVFrame *frame);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Flush buffers.</span></span><br><span class=\"line\"><span class=\"comment\">     * Will be called when seeking</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*flush)(struct AVCodecContext *);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Internal codec capabilities.</span></span><br><span class=\"line\"><span class=\"comment\">     * See FF_CODEC_CAP_* in internal.h</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> caps_internal;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Decoding only, a comma-separated list of bitstream filters to apply to</span></span><br><span class=\"line\"><span class=\"comment\">     * packets before decoding.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *bsfs;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Array of pointers to hardware configurations supported by the codec,</span></span><br><span class=\"line\"><span class=\"comment\">     * or NULL if no hardware supported.  The array is terminated by a NULL</span></span><br><span class=\"line\"><span class=\"comment\">     * pointer.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * The user can only access this field via avcodec_get_hw_config().</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AVCodecHWConfigInternal</span> **<span class=\"title\">hw_configs</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * List of supported codec_tags, terminated by FF_CODEC_TAGS_END.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> *codec_tags;</span><br><span class=\"line\">&#125;AVCodec;</span><br></pre></td></tr></table></figure>\n<p>现在逐个来说明下结构体中的变量    </p>\n<ol>\n<li>*<em>const char <em>name</em></em> ：编解码器的名字，比较短    </li>\n<li>*<em>const char <em>long_name</em></em> :编解码器的名字，全称    </li>\n<li><strong>enum AVMediaType type</strong> :媒体类型,视频、音频、字幕等  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">AVMediaType</span> &#123;</span></span><br><span class=\"line\">    AVMEDIA_TYPE_UNKNOWN = <span class=\"number\">-1</span>,  <span class=\"comment\">///&lt; Usually treated as AVMEDIA_TYPE_DATA</span></span><br><span class=\"line\">    AVMEDIA_TYPE_VIDEO,</span><br><span class=\"line\">    AVMEDIA_TYPE_AUDIO,</span><br><span class=\"line\">    AVMEDIA_TYPE_DATA,          <span class=\"comment\">///&lt; Opaque data information usually continuous</span></span><br><span class=\"line\">    AVMEDIA_TYPE_SUBTITLE,</span><br><span class=\"line\">    AVMEDIA_TYPE_ATTACHMENT,    <span class=\"comment\">///&lt; Opaque data information usually sparse</span></span><br><span class=\"line\">    AVMEDIA_TYPE_NB</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li><strong>enum AVCodecID id</strong> ：编解码器ID，定义太多，例如AV_CODEC_ID_HEVC、AV_CODEC_ID_H264、AV_CODEC_ID_VP8…… ffmpeg太强大了，支持的编解码器太多太多了。</li>\n<li><strong>int capabilities</strong> :编解码器的能力，例如：H264: CODEC_CAP_DR1|CODEC_CAP_DELAY|CODEC_CAP_SLICE_THREADS|CODEC_CAP_FRAME_THREADS</li>\n<li>*<em>const AVRational <em>supported_framerates</em></em> ：支持的帧率，例如25帧的话，(AVRational){1, 25}</li>\n<li>*<em>const enum AVPixelFormat <em>pix_fmts</em></em> ：针对视频而言，编解码器支持的数据格式，例如AV_PIX_FMT_YUV420P、AV_PIX_FMT_YUV422P、AV_PIX_FMT_RGB24……格式也是有很多多种</li>\n<li>*<em>const int <em>supported_samplerates</em></em> ：音频而言，编解码器支持的采样率</li>\n<li>*<em>const enum AVSampleFormat <em>sample_fmts</em></em> ：音频而言，编解码器支持的采样格式，例如：AV_SAMPLE_FMT_U8、AV_SAMPLE_FMT_S16、AV_SAMPLE_FMT_S16P……</li>\n<li>*<em>const uint64_t <em>channel_layouts</em></em> ：编解码器支持的声道数</li>\n<li><strong>uint8_t max_lowres</strong> ：解码器支持低分辨率的最大值</li>\n<li>*<em>const AVClass <em>priv_class</em></em> ：AVClass针对私有上下文，以后再来扒AVClass，暂时先跳过</li>\n<li>*<em>const AVProfile <em>profiles</em></em> ：公认的配置文件数组,如果未知则为NULL,数组由FF_PROFILE_UNKNOWN表示终止</li>\n<li>*<em>const char <em>wrapper_name</em></em> ：编解码器实现的组名</li>\n<li><strong>int priv_data_size</strong> ：私有数据总长度</li>\n<li>*<em>struct AVCodec <em>next</em></em> ：下一个链接对象</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}